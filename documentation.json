{
    "pipes": [],
    "interfaces": [
        {
            "name": "DialogDataOptions",
            "id": "interface-DialogDataOptions-fb7067c02040f59d45edebe01d84ac75812faadb43b175c82b5151bc4ffa9be2b5e4c6c5b60abc0c1d5f630a85bfdec7a35ef4ff78d2774813ab60096b064d85",
            "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nexport enum ButtonType {\r\n  RAISED = 'raised',\r\n  STROKED = 'stroked',\r\n  NORMAL = 'normal',\r\n}\r\ntype buttonsType = 'yes_not' | 'confirm_cancel' | 'cancel_confirm' | 'ok';\r\nexport interface DialogOption {\r\n  text: string;\r\n  buttonType?: ButtonType;\r\n  buttonColor?: string;\r\n  option?: boolean | number | string;\r\n  closeButton?: boolean;\r\n  suggested?: boolean;\r\n}\r\nexport interface DialogDataOptions {\r\n  title?: string;\r\n  message: string;\r\n  actionText?: string;\r\n  actionButtonColor?: string;\r\n  actionButtonType?: ButtonType;\r\n  cancelButtonColor?: string;\r\n  cancelButtonType?: ButtonType;\r\n  cancelText?: string;\r\n  buttonColor?: string;\r\n  maxWidth?: number;\r\n  options?: DialogOption[];\r\n  suggested?: 'confirm' | 'cancel' | 'yes' | 'no' | 'none';\r\n  buttons?: buttonsType;\r\n}\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  title: string = 'Confirmar';\r\n  message = '';\r\n  safeMessage: SafeHtml = '';\r\n  actionText = 'ACEPTAR';\r\n  yesText = 'S√ç';\r\n  noText = 'NO';\r\n  actionButtonColor = 'primary';\r\n  actionButtonType: ButtonType = ButtonType.RAISED;\r\n  cancelText = 'CANCELAR';\r\n  cancelButtonColor!: string;\r\n  cancelButtonType!: ButtonType;\r\n  maxWidth!: number;\r\n  options: DialogOption[] = [];\r\n  suggested: 'confirm' | 'cancel' | 'yes' | 'no' | 'none' = 'none';\r\n  buttons!: buttonsType;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private inputData: DialogDataOptions,\r\n    public sanitizer: DomSanitizer\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setPropsFromData();\r\n  }\r\n\r\n  setPropsFromData() {\r\n    const me = this;\r\n    Object.assign(me, me.inputData);\r\n    me.safeMessage = me.sanitizer.bypassSecurityTrustHtml(me.message);\r\n    if (!me.options.length) {\r\n      me.setDefaultButtons();\r\n    }\r\n  }\r\n\r\n  setDefaultButtons() {\r\n    const me = this;\r\n    // Buttons YES/NOT\r\n    if (me.buttons == 'yes_not') {\r\n      me.options = me.getYesNotButtons();\r\n      return;\r\n    }\r\n    if (me.buttons == 'confirm_cancel' || me.buttons == 'cancel_confirm') {\r\n      me.options = [\r\n        {\r\n          text: me.actionText,\r\n          buttonColor: me.actionButtonColor ? me.actionButtonColor : 'primary',\r\n          buttonType: ButtonType.RAISED,\r\n          option: true,\r\n          suggested: me.suggested == 'confirm',\r\n        },\r\n        {\r\n          text: me.cancelText,\r\n          buttonType: ButtonType.NORMAL,\r\n          option: false,\r\n          suggested: me.suggested == 'cancel',\r\n        },\r\n      ];\r\n      if (me.buttons == 'cancel_confirm') {\r\n        me.options.reverse();\r\n      }\r\n      return;\r\n    }\r\n    if (me.buttons == 'ok') {\r\n      me.options = [\r\n        {\r\n          text: me.actionText,\r\n          buttonColor: me.actionButtonColor ? me.actionButtonColor : 'primary',\r\n          buttonType: ButtonType.RAISED,\r\n          option: true,\r\n        },\r\n      ];\r\n    }\r\n  }\r\n\r\n  getYesNotButtons() {\r\n    const me = this;\r\n    return [\r\n      {\r\n        text: me.yesText,\r\n        buttonColor: 'primary',\r\n        buttonType:\r\n          me.suggested == 'yes' ? ButtonType.RAISED : ButtonType.STROKED,\r\n        option: true,\r\n      },\r\n      {\r\n        text: me.noText,\r\n        buttonColor: me.suggested == 'no' ? 'primary' : 'warn',\r\n        buttonType:\r\n          me.suggested == 'no' ? ButtonType.RAISED : ButtonType.STROKED,\r\n        option: false,\r\n      },\r\n    ];\r\n  }\r\n\r\n  onOptionClick(option: DialogOption) {\r\n    const me = this;\r\n    me.dialogRef.close(option.option);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "actionButtonColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "actionButtonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "actionText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "buttonColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "buttonsType",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "cancelButtonColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "cancelButtonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "cancelText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogOption[]",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "suggested",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"confirm\" | \"cancel\" | \"yes\" | \"no\" | \"none\"",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "DialogOption",
            "id": "interface-DialogOption-fb7067c02040f59d45edebe01d84ac75812faadb43b175c82b5151bc4ffa9be2b5e4c6c5b60abc0c1d5f630a85bfdec7a35ef4ff78d2774813ab60096b064d85",
            "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nexport enum ButtonType {\r\n  RAISED = 'raised',\r\n  STROKED = 'stroked',\r\n  NORMAL = 'normal',\r\n}\r\ntype buttonsType = 'yes_not' | 'confirm_cancel' | 'cancel_confirm' | 'ok';\r\nexport interface DialogOption {\r\n  text: string;\r\n  buttonType?: ButtonType;\r\n  buttonColor?: string;\r\n  option?: boolean | number | string;\r\n  closeButton?: boolean;\r\n  suggested?: boolean;\r\n}\r\nexport interface DialogDataOptions {\r\n  title?: string;\r\n  message: string;\r\n  actionText?: string;\r\n  actionButtonColor?: string;\r\n  actionButtonType?: ButtonType;\r\n  cancelButtonColor?: string;\r\n  cancelButtonType?: ButtonType;\r\n  cancelText?: string;\r\n  buttonColor?: string;\r\n  maxWidth?: number;\r\n  options?: DialogOption[];\r\n  suggested?: 'confirm' | 'cancel' | 'yes' | 'no' | 'none';\r\n  buttons?: buttonsType;\r\n}\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  title: string = 'Confirmar';\r\n  message = '';\r\n  safeMessage: SafeHtml = '';\r\n  actionText = 'ACEPTAR';\r\n  yesText = 'S√ç';\r\n  noText = 'NO';\r\n  actionButtonColor = 'primary';\r\n  actionButtonType: ButtonType = ButtonType.RAISED;\r\n  cancelText = 'CANCELAR';\r\n  cancelButtonColor!: string;\r\n  cancelButtonType!: ButtonType;\r\n  maxWidth!: number;\r\n  options: DialogOption[] = [];\r\n  suggested: 'confirm' | 'cancel' | 'yes' | 'no' | 'none' = 'none';\r\n  buttons!: buttonsType;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private inputData: DialogDataOptions,\r\n    public sanitizer: DomSanitizer\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setPropsFromData();\r\n  }\r\n\r\n  setPropsFromData() {\r\n    const me = this;\r\n    Object.assign(me, me.inputData);\r\n    me.safeMessage = me.sanitizer.bypassSecurityTrustHtml(me.message);\r\n    if (!me.options.length) {\r\n      me.setDefaultButtons();\r\n    }\r\n  }\r\n\r\n  setDefaultButtons() {\r\n    const me = this;\r\n    // Buttons YES/NOT\r\n    if (me.buttons == 'yes_not') {\r\n      me.options = me.getYesNotButtons();\r\n      return;\r\n    }\r\n    if (me.buttons == 'confirm_cancel' || me.buttons == 'cancel_confirm') {\r\n      me.options = [\r\n        {\r\n          text: me.actionText,\r\n          buttonColor: me.actionButtonColor ? me.actionButtonColor : 'primary',\r\n          buttonType: ButtonType.RAISED,\r\n          option: true,\r\n          suggested: me.suggested == 'confirm',\r\n        },\r\n        {\r\n          text: me.cancelText,\r\n          buttonType: ButtonType.NORMAL,\r\n          option: false,\r\n          suggested: me.suggested == 'cancel',\r\n        },\r\n      ];\r\n      if (me.buttons == 'cancel_confirm') {\r\n        me.options.reverse();\r\n      }\r\n      return;\r\n    }\r\n    if (me.buttons == 'ok') {\r\n      me.options = [\r\n        {\r\n          text: me.actionText,\r\n          buttonColor: me.actionButtonColor ? me.actionButtonColor : 'primary',\r\n          buttonType: ButtonType.RAISED,\r\n          option: true,\r\n        },\r\n      ];\r\n    }\r\n  }\r\n\r\n  getYesNotButtons() {\r\n    const me = this;\r\n    return [\r\n      {\r\n        text: me.yesText,\r\n        buttonColor: 'primary',\r\n        buttonType:\r\n          me.suggested == 'yes' ? ButtonType.RAISED : ButtonType.STROKED,\r\n        option: true,\r\n      },\r\n      {\r\n        text: me.noText,\r\n        buttonColor: me.suggested == 'no' ? 'primary' : 'warn',\r\n        buttonType:\r\n          me.suggested == 'no' ? ButtonType.RAISED : ButtonType.STROKED,\r\n        option: false,\r\n      },\r\n    ];\r\n  }\r\n\r\n  onOptionClick(option: DialogOption) {\r\n    const me = this;\r\n    me.dialogRef.close(option.option);\r\n  }\r\n\r\n}\r\n",
            "properties": [
                {
                    "name": "buttonColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "buttonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "closeButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "option",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | number | string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "suggested",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "FormField",
            "id": "interface-FormField-84e15f8d39fe597df3ed80b43f772a8b19f52529cc2cd1e238259ba459cc5f0edfb7ddd4f48a8d99536ef9986379dd55b37355b7b773b580288f8a95785dbd41",
            "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nexport const EMAIL_PATTERN =\r\n  /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\nexport const URL_PATTERN =\r\n  /(((^https?)|(^ftp)):\\/\\/((([\\-\\w]+\\.)+\\w{2,3}(\\/[%\\-\\w]+(\\.\\w{2,})?)*(([\\w\\-\\.\\?\\\\\\/+@&#;`~=%!]*)(\\.\\w{2,})?)*)|(localhost|LOCALHOST))\\/?)/i;\r\n\r\nexport interface FormFieldOptions {\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  email?: boolean;\r\n  pattern?: RegExp | string;\r\n  emailPattern?: boolean | RegExp;\r\n  urlPattern?: boolean | RegExp;\r\n  customValidation?: Function;\r\n  defaultValue?: any;\r\n  valueType?: 'array' | 'object' | 'string' | 'number' | 'boolean';\r\n  arrayValueType?: 'string' | 'number';\r\n}\r\nexport interface FormField extends FormFieldOptions {\r\n  name: string;\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FormBuilderHelper {\r\n  constructor(private formBuilder: UntypedFormBuilder) { }\r\n  buildFormModel(fields: { [key: string]: FormFieldOptions }, values: { [key: string]: any }) {\r\n    const me = this;\r\n    let formGroupObjet: any = {},\r\n      field: FormFieldOptions,\r\n      fieldValue,\r\n      fieldPropsObj;\r\n    values = values ? values : {};\r\n    for (const fieldName of Object.keys(fields)) {\r\n      field = fields[fieldName];\r\n      fieldValue = values[fieldName];\r\n      // If the valueType is array and the value is a string, we need to convert it to an array\r\n      if (field.valueType === 'array' && typeof fieldValue === 'string') {\r\n        fieldValue = fieldValue.split(',').map(value => {\r\n          if (field.arrayValueType === 'number') {\r\n            return Number(value);\r\n          }\r\n          return value.trim();\r\n        });\r\n      }\r\n      fieldValue = fieldValue !== undefined ? fieldValue : field.defaultValue;\r\n      // disabled Field\r\n      if (field.disabled) {\r\n        fieldPropsObj = { value: fieldValue, disabled: true };\r\n      } else {\r\n        fieldPropsObj = fieldValue;\r\n      }\r\n      formGroupObjet[fieldName] = [fieldPropsObj, me.getValidators(field)];\r\n    }\r\n    return this.formBuilder.group(formGroupObjet);\r\n  }\r\n  /**\r\n   * Retronar un arreglo de validadores\r\n   * @param field\r\n   */\r\n  getValidators(field: FormFieldOptions) {\r\n    let out = [];\r\n    if (field.required) {\r\n      out.push(Validators.required);\r\n    }\r\n    if (field.min !== undefined) {\r\n      out.push(Validators.min(field.min));\r\n    }\r\n    if (field.max !== undefined) {\r\n      out.push(Validators.max(field.max));\r\n    }\r\n    if (field.minLength) {\r\n      out.push(Validators.minLength(field.minLength));\r\n    }\r\n    if (field.maxLength) {\r\n      out.push(Validators.maxLength(field.maxLength));\r\n    }\r\n    if (field.email) {\r\n      out.push(Validators.email);\r\n    }\r\n    if (field.emailPattern) {\r\n      out.push(Validators.pattern(EMAIL_PATTERN));\r\n    }\r\n    if (field.urlPattern) {\r\n      out.push(Validators.pattern(URL_PATTERN));\r\n    }\r\n    if (field.pattern) {\r\n      out.push(Validators.pattern(field.pattern));\r\n    }\r\n    if (field.customValidation) {\r\n      out.push(field.customValidation);\r\n    }\r\n    return out;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": [],
            "extends": "FormFieldOptions"
        },
        {
            "name": "FormFieldOptions",
            "id": "interface-FormFieldOptions-84e15f8d39fe597df3ed80b43f772a8b19f52529cc2cd1e238259ba459cc5f0edfb7ddd4f48a8d99536ef9986379dd55b37355b7b773b580288f8a95785dbd41",
            "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nexport const EMAIL_PATTERN =\r\n  /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\nexport const URL_PATTERN =\r\n  /(((^https?)|(^ftp)):\\/\\/((([\\-\\w]+\\.)+\\w{2,3}(\\/[%\\-\\w]+(\\.\\w{2,})?)*(([\\w\\-\\.\\?\\\\\\/+@&#;`~=%!]*)(\\.\\w{2,})?)*)|(localhost|LOCALHOST))\\/?)/i;\r\n\r\nexport interface FormFieldOptions {\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  email?: boolean;\r\n  pattern?: RegExp | string;\r\n  emailPattern?: boolean | RegExp;\r\n  urlPattern?: boolean | RegExp;\r\n  customValidation?: Function;\r\n  defaultValue?: any;\r\n  valueType?: 'array' | 'object' | 'string' | 'number' | 'boolean';\r\n  arrayValueType?: 'string' | 'number';\r\n}\r\nexport interface FormField extends FormFieldOptions {\r\n  name: string;\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FormBuilderHelper {\r\n  constructor(private formBuilder: UntypedFormBuilder) { }\r\n  buildFormModel(fields: { [key: string]: FormFieldOptions }, values: { [key: string]: any }) {\r\n    const me = this;\r\n    let formGroupObjet: any = {},\r\n      field: FormFieldOptions,\r\n      fieldValue,\r\n      fieldPropsObj;\r\n    values = values ? values : {};\r\n    for (const fieldName of Object.keys(fields)) {\r\n      field = fields[fieldName];\r\n      fieldValue = values[fieldName];\r\n      // If the valueType is array and the value is a string, we need to convert it to an array\r\n      if (field.valueType === 'array' && typeof fieldValue === 'string') {\r\n        fieldValue = fieldValue.split(',').map(value => {\r\n          if (field.arrayValueType === 'number') {\r\n            return Number(value);\r\n          }\r\n          return value.trim();\r\n        });\r\n      }\r\n      fieldValue = fieldValue !== undefined ? fieldValue : field.defaultValue;\r\n      // disabled Field\r\n      if (field.disabled) {\r\n        fieldPropsObj = { value: fieldValue, disabled: true };\r\n      } else {\r\n        fieldPropsObj = fieldValue;\r\n      }\r\n      formGroupObjet[fieldName] = [fieldPropsObj, me.getValidators(field)];\r\n    }\r\n    return this.formBuilder.group(formGroupObjet);\r\n  }\r\n  /**\r\n   * Retronar un arreglo de validadores\r\n   * @param field\r\n   */\r\n  getValidators(field: FormFieldOptions) {\r\n    let out = [];\r\n    if (field.required) {\r\n      out.push(Validators.required);\r\n    }\r\n    if (field.min !== undefined) {\r\n      out.push(Validators.min(field.min));\r\n    }\r\n    if (field.max !== undefined) {\r\n      out.push(Validators.max(field.max));\r\n    }\r\n    if (field.minLength) {\r\n      out.push(Validators.minLength(field.minLength));\r\n    }\r\n    if (field.maxLength) {\r\n      out.push(Validators.maxLength(field.maxLength));\r\n    }\r\n    if (field.email) {\r\n      out.push(Validators.email);\r\n    }\r\n    if (field.emailPattern) {\r\n      out.push(Validators.pattern(EMAIL_PATTERN));\r\n    }\r\n    if (field.urlPattern) {\r\n      out.push(Validators.pattern(URL_PATTERN));\r\n    }\r\n    if (field.pattern) {\r\n      out.push(Validators.pattern(field.pattern));\r\n    }\r\n    if (field.customValidation) {\r\n      out.push(field.customValidation);\r\n    }\r\n    return out;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "arrayValueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"string\" | \"number\"",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "customValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Function",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "defaultValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "emailPattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | RegExp",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegExp | string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "urlPattern",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | RegExp",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "valueType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"array\" | \"object\" | \"string\" | \"number\" | \"boolean\"",
                    "optional": true,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "NavItemModel",
            "id": "interface-NavItemModel-206ecb8e5036fde7cf8ef852980c04cc281f2d122c644f84ee04732864fc9bb724eca54d0b989d5192244c84294978577ad5ce688761945789b30b8315615242",
            "file": "projects/ngx-kit-business/components/src/nav-list/nav-item.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NavItemModel {\r\n  icon: string;\r\n  text: string;\r\n  route?: string;\r\n  children?: NavItemModel[];\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItemModel[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 168,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "projects/ngx-kit-business/src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "DialogService",
            "id": "injectable-DialogService-ccd4017fec19d9bfed4f524667cc577eb9843d3f9497435170ab1b872028a8eea63da5aea764710a6ff5d0b49f6c461b5e70b0f6feb07be83f2b7adaa4c64f5f",
            "file": "projects/ngx-kit-business/components/src/services/dialog.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "alert",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBotones ACEPTAR\n",
                    "description": "<p>Botones ACEPTAR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "suggested",
                            "type": "\"confirm\" | \"cancel\" | \"none\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'confirm'"
                        },
                        {
                            "name": "actionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'CONFIRMAR'"
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBotones ACEPTAR/CANCELAR\n",
                    "description": "<p>Botones ACEPTAR/CANCELAR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "suggested",
                            "type": "\"confirm\" | \"cancel\" | \"none\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'confirm'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'CONFIRMAR'",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "actionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'ELIMINAR'"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBotones ELIMINAR/CANCELAR\n",
                    "description": "<p>Botones ELIMINAR/CANCELAR</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "actionText",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'ELIMINAR'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "decide",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "DialogOption[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "DialogOption[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "component",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDialog",
                    "args": [
                        {
                            "name": "editor",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "DialogDataOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "editor",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "DialogDataOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openEditor",
                    "args": [
                        {
                            "name": "editorCmp",
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAbrir editor\n\n",
                    "description": "<p>Abrir editor</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2304,
                                "end": 2313,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "editorCmp"
                            },
                            "type": "ComponentType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2298,
                                "end": 2303,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Dialog component</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2344,
                                "end": 2349,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "model"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2338,
                                "end": 2343,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Model</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2374,
                                "end": 2380,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "parent"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2368,
                                "end": 2373,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Parent Model</p>\n"
                        },
                        {
                            "name": {
                                "pos": 2412,
                                "end": 2416,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 2406,
                                "end": 2411,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Aditional data</p>\n"
                        }
                    ]
                },
                {
                    "name": "yesOrNot",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "suggested",
                            "type": "\"yes\" | \"no\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'yes'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nBotones S√ç/NO\n",
                    "description": "<p>Botones S√ç/NO</p>\n",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "suggested",
                            "type": "\"yes\" | \"no\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'yes'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { DialogComponent, DialogDataOptions, DialogOption } from '../dialog/dialog.component';\r\nimport { ComponentType } from '@angular/cdk/portal';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DialogService {\r\n  constructor(private matDialog: MatDialog) { }\r\n  /**\r\n   * Botones ACEPTAR/CANCELAR\r\n   */\r\n  confirm(\r\n    title: string,\r\n    message: string,\r\n    suggested: 'confirm' | 'cancel' | 'none' = 'confirm',\r\n    actionText = 'CONFIRMAR',\r\n    options?: any\r\n  ): Observable<any> {\r\n    return this.openDialog(\r\n      DialogComponent,\r\n      {\r\n        title,\r\n        message,\r\n        buttons: 'confirm_cancel',\r\n        suggested,\r\n        actionText,\r\n      },\r\n      options\r\n    );\r\n  }\r\n  /**\r\n   * Botones S√ç/NO\r\n   */\r\n  yesOrNot(\r\n    title: string,\r\n    message: string,\r\n    suggested: 'yes' | 'no' = 'yes'\r\n  ): Observable<any> {\r\n    return this.openDialog(DialogComponent, {\r\n      title,\r\n      message,\r\n      buttons: 'yes_not',\r\n      suggested,\r\n    });\r\n  }\r\n  /**\r\n   * Botones ELIMINAR/CANCELAR\r\n   */\r\n  confirmDelete(title: string, message: string, actionText = 'ELIMINAR') {\r\n    return this.openDialog(DialogComponent, {\r\n      title,\r\n      message,\r\n      buttons: 'confirm_cancel',\r\n      actionText,\r\n      actionButtonColor: 'warn',\r\n      suggested: 'cancel',\r\n      maxWidth: 360,\r\n    });\r\n  }\r\n  /**\r\n   * Botones ACEPTAR\r\n   */\r\n  alert(title: string, message: string, options?: any) {\r\n    return this.openDialog(DialogComponent, {\r\n      title,\r\n      message,\r\n      buttons: 'ok',\r\n      actionText: 'ACEPTAR',\r\n      actionButtonColor: 'primary',\r\n      maxWidth: 360,\r\n      ...options,\r\n    });\r\n  }\r\n  decide(title: string, message: string, options: DialogOption[]) {\r\n    return this.openDialog(DialogComponent, {\r\n      title,\r\n      message,\r\n      options,\r\n    });\r\n  }\r\n  open<T>(component: ComponentType<T>, data: any, options?: any) {\r\n    return this.matDialog\r\n      .open(component, {\r\n        data,\r\n        disableClose: true,\r\n        position: { top: '50px' },\r\n        width: '100%',\r\n        ...options,\r\n      })\r\n      .afterClosed();\r\n  }\r\n  /**\r\n   * Abrir editor\r\n   *\r\n   * @param editorCmp Dialog component\r\n   * @param model      Model\r\n   * @param parent      Parent Model\r\n   * @param data        Aditional data\r\n   */\r\n  openEditor<T>(editorCmp: ComponentType<T>, model: any, parent?: any, data?: any) {\r\n    return this.matDialog\r\n      .open(editorCmp, {\r\n        data: {\r\n          model,\r\n          parent,\r\n          data,\r\n        },\r\n        disableClose: true,\r\n        position: { top: '50px' },\r\n      })\r\n      .afterClosed();\r\n  }\r\n  private openDialog<T>(editor: ComponentType<T>, data: DialogDataOptions, options?: any) {\r\n    return this.matDialog\r\n      .open(editor, {\r\n        data,\r\n        disableClose: true,\r\n        position: { top: '50px' },\r\n        ...options,\r\n      })\r\n      .afterClosed();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FormBuilderHelper",
            "id": "injectable-FormBuilderHelper-84e15f8d39fe597df3ed80b43f772a8b19f52529cc2cd1e238259ba459cc5f0edfb7ddd4f48a8d99536ef9986379dd55b37355b7b773b580288f8a95785dbd41",
            "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
            "properties": [],
            "methods": [
                {
                    "name": "buildFormModel",
                    "args": [
                        {
                            "name": "fields",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "values",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fields",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "values",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "field",
                            "type": "FormFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetronar un arreglo de validadores\n",
                    "description": "<p>Retronar un arreglo de validadores</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2284,
                                "end": 2289,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "field"
                            },
                            "type": "FormFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2278,
                                "end": 2283,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { UntypedFormBuilder, Validators } from '@angular/forms';\r\nexport const EMAIL_PATTERN =\r\n  /^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/;\r\nexport const URL_PATTERN =\r\n  /(((^https?)|(^ftp)):\\/\\/((([\\-\\w]+\\.)+\\w{2,3}(\\/[%\\-\\w]+(\\.\\w{2,})?)*(([\\w\\-\\.\\?\\\\\\/+@&#;`~=%!]*)(\\.\\w{2,})?)*)|(localhost|LOCALHOST))\\/?)/i;\r\n\r\nexport interface FormFieldOptions {\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  email?: boolean;\r\n  pattern?: RegExp | string;\r\n  emailPattern?: boolean | RegExp;\r\n  urlPattern?: boolean | RegExp;\r\n  customValidation?: Function;\r\n  defaultValue?: any;\r\n  valueType?: 'array' | 'object' | 'string' | 'number' | 'boolean';\r\n  arrayValueType?: 'string' | 'number';\r\n}\r\nexport interface FormField extends FormFieldOptions {\r\n  name: string;\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FormBuilderHelper {\r\n  constructor(private formBuilder: UntypedFormBuilder) { }\r\n  buildFormModel(fields: { [key: string]: FormFieldOptions }, values: { [key: string]: any }) {\r\n    const me = this;\r\n    let formGroupObjet: any = {},\r\n      field: FormFieldOptions,\r\n      fieldValue,\r\n      fieldPropsObj;\r\n    values = values ? values : {};\r\n    for (const fieldName of Object.keys(fields)) {\r\n      field = fields[fieldName];\r\n      fieldValue = values[fieldName];\r\n      // If the valueType is array and the value is a string, we need to convert it to an array\r\n      if (field.valueType === 'array' && typeof fieldValue === 'string') {\r\n        fieldValue = fieldValue.split(',').map(value => {\r\n          if (field.arrayValueType === 'number') {\r\n            return Number(value);\r\n          }\r\n          return value.trim();\r\n        });\r\n      }\r\n      fieldValue = fieldValue !== undefined ? fieldValue : field.defaultValue;\r\n      // disabled Field\r\n      if (field.disabled) {\r\n        fieldPropsObj = { value: fieldValue, disabled: true };\r\n      } else {\r\n        fieldPropsObj = fieldValue;\r\n      }\r\n      formGroupObjet[fieldName] = [fieldPropsObj, me.getValidators(field)];\r\n    }\r\n    return this.formBuilder.group(formGroupObjet);\r\n  }\r\n  /**\r\n   * Retronar un arreglo de validadores\r\n   * @param field\r\n   */\r\n  getValidators(field: FormFieldOptions) {\r\n    let out = [];\r\n    if (field.required) {\r\n      out.push(Validators.required);\r\n    }\r\n    if (field.min !== undefined) {\r\n      out.push(Validators.min(field.min));\r\n    }\r\n    if (field.max !== undefined) {\r\n      out.push(Validators.max(field.max));\r\n    }\r\n    if (field.minLength) {\r\n      out.push(Validators.minLength(field.minLength));\r\n    }\r\n    if (field.maxLength) {\r\n      out.push(Validators.maxLength(field.maxLength));\r\n    }\r\n    if (field.email) {\r\n      out.push(Validators.email);\r\n    }\r\n    if (field.emailPattern) {\r\n      out.push(Validators.pattern(EMAIL_PATTERN));\r\n    }\r\n    if (field.urlPattern) {\r\n      out.push(Validators.pattern(URL_PATTERN));\r\n    }\r\n    if (field.pattern) {\r\n      out.push(Validators.pattern(field.pattern));\r\n    }\r\n    if (field.customValidation) {\r\n      out.push(field.customValidation);\r\n    }\r\n    return out;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "UntypedFormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "HttpActivityService",
            "id": "injectable-HttpActivityService-9ee6a1829a4fb05d93d7a185a8867a7acbf268f7a11149c438c28bc43cd02725fd7438480e3c28de63baa43b9c65ac664a03fd02a7d572938cbc0d3448750a0f",
            "file": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity.service.ts",
            "properties": [
                {
                    "name": "observer",
                    "defaultValue": "new Subject<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "statusChange",
                    "defaultValue": "this.observer.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hideIndicator",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showIndicator",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HttpActivityService {\r\n  observer = new Subject<boolean>();\r\n  public statusChange = this.observer.asObservable();\r\n  showIndicator() {\r\n    this.observer.next(true);\r\n  }\r\n  hideIndicator() {\r\n    this.observer.next(false);\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "NgxKitBusinessService",
            "id": "injectable-NgxKitBusinessService-983a986908debc65da6f337d01f4a4ca1cae8aa0fce31b53c9254f6e396275461f4463b8e10c851b6a102ee3016dc7aba1171638acbb2a4faaa3e948a3e91541",
            "file": "projects/ngx-kit-business/src/lib/ngx-kit-business.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxKitBusinessService {\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "type": "injectable"
        },
        {
            "name": "NotificationsService",
            "id": "injectable-NotificationsService-1a026f3e6a7620ed124ededb377183dceb1cdd2ee1d6737481cd480b5e3cc2719c94d559735ffc905ac904240a10dc4cb3a4f12dae2d74bbbd695ea03b1144a1",
            "file": "projects/ngx-kit-business/components/src/services/notifications.service.ts",
            "properties": [
                {
                    "name": "http_server_message_tpl",
                    "defaultValue": "`\r\n  <p style=\"max-width: 360px;\">\r\n    CITES - PER√ö<br>\r\n    <i>{message}</i>\r\n  </p>\r\n  <small><small>ERROR {status}</small></small>`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "getSnackClass",
                    "args": [
                        {
                            "name": "type",
                            "type": "MessageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "MessageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleXhrError",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest | any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cmp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest | any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cmp",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logXhr",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mask",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "noInternet",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "noServerResponse",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "serverUnauthorized",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDefaultMessage",
                    "args": [
                        {
                            "name": "status",
                            "type": "HttpStatusCode | \"0\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "HttpStatusCode | \"0\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSnack",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "MessageType",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "MessageType",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snackDanger",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snackInfo",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snackSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "snackWarning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { HttpStatusCode } from '@angular/common/http';\r\nimport { ProcessMaskComponent } from '../process-mask';\r\nimport { SnackBarComponent } from '../snack-bar';\r\nimport { MessageType } from './message.type';\r\nimport { XhrInfo } from './xhr-info';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NotificationsService {\r\n  http_server_message_tpl = `\r\n  <p style=\"max-width: 360px;\">\r\n    CITES - PER√ö<br>\r\n    <i>{message}</i>\r\n  </p>\r\n  <small><small>ERROR {status}</small></small>`;\r\n  constructor(private _snackBar: MatSnackBar, private matDialog: MatDialog) { }\r\n  handleXhrError(xhr: XMLHttpRequest | any, cmp?: any) {\r\n    const me = this,\r\n      defaultMessageStatuses = [\r\n        0, // No internet\r\n        404, // Servicio no encontrado\r\n        500, // Server error\r\n      ],\r\n      status = xhr.status;\r\n    let finalMessage;\r\n    me.logXhr(xhr);\r\n    // Defaul\r\n    if (defaultMessageStatuses.indexOf(status) != -1) {\r\n      me.showDefaultMessage(status);\r\n      return;\r\n    }\r\n    // No server response\r\n    if (status === undefined || status === null) {\r\n      me.noServerResponse();\r\n      return;\r\n    }\r\n    // Authentication Required\r\n    if (status == 401 && cmp && cmp.__forceClose) {\r\n      cmp.__forceClose();\r\n      return;\r\n    }\r\n    // Authentication Required/Como login.redirect.interceptor.ts redirecciona a login,\r\n    // No es necesario mostrar el mensaje de error.\r\n    if (status == 401) {\r\n      return;\r\n    }\r\n    // Autenticaci√≥n requerida: 401\r\n\r\n    if (status == 400) {\r\n      const error = xhr.error.toString() == '[object Object]' ? xhr.error : {};\r\n      const messageType: MessageType = status == 400 ? 'warning' : 'danger';\r\n      // Show server message\r\n      if (error.message) {\r\n        finalMessage = me.http_server_message_tpl\r\n          .replace('{message}', error.message)\r\n          .replace('{status}', status);\r\n        me.showSnack(finalMessage, messageType);\r\n        return;\r\n      }\r\n      me.showDefaultMessage(status);\r\n      return;\r\n    }\r\n    me.showDefaultMessage(status);\r\n  }\r\n  showSnack(message: string, type: MessageType) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      panelClass: this.getSnackClass(type),\r\n      data: {\r\n        html: message,\r\n      },\r\n      duration: 2000,\r\n      verticalPosition: 'top', // 'top' | 'bottom'\r\n    });\r\n  }\r\n  mask(message: string) {\r\n    return this.matDialog.open(ProcessMaskComponent, {\r\n      disableClose: true,\r\n      data: {\r\n        message,\r\n      },\r\n    });\r\n  }\r\n  snackSuccess(message: string) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      panelClass: this.getSnackClass('success'),\r\n      data: {\r\n        html: message,\r\n      },\r\n      duration: 2000,\r\n      verticalPosition: 'top', // 'top' | 'bottom'\r\n    });\r\n  }\r\n  snackDanger(message: string) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      panelClass: this.getSnackClass('danger'),\r\n      data: {\r\n        html: message,\r\n      },\r\n      duration: 2000,\r\n      verticalPosition: 'top', // 'top' | 'bottom'\r\n    });\r\n  }\r\n  snackWarning(message: string) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      panelClass: this.getSnackClass('warning'),\r\n      data: {\r\n        html: message,\r\n      },\r\n      duration: 2000,\r\n      verticalPosition: 'top', // 'top' | 'bottom'\r\n    });\r\n  }\r\n  snackInfo(message: string) {\r\n    this._snackBar.openFromComponent(SnackBarComponent, {\r\n      panelClass: this.getSnackClass('info'),\r\n      data: {\r\n        html: message,\r\n      },\r\n      duration: 2000,\r\n      verticalPosition: 'top', // 'top' | 'bottom'\r\n    });\r\n  }\r\n  private getSnackClass(type: MessageType) {\r\n    const map = {\r\n      warning: ['bg-warning', 'text-dark'],\r\n      danger: ['bg-danger', 'text-white'],\r\n      info: ['bg-info', 'text-white'],\r\n      success: ['bg-success', 'text-white'],\r\n    };\r\n    return map[type];\r\n  }\r\n  private logXhr(xhr: XMLHttpRequest) {\r\n    console.error(xhr);\r\n  }\r\n  noInternet() {\r\n    this.showDefaultMessage(0);\r\n  }\r\n  noServerResponse() {\r\n    this.showDefaultMessage(503);\r\n  }\r\n  serverUnauthorized() {\r\n    this.showDefaultMessage(401);\r\n  }\r\n  showDefaultMessage(status: HttpStatusCode | 0) {\r\n    this._snackBar.open(XhrInfo.getStatusMessage(status), 'ACEPTAR', {\r\n      verticalPosition: 'top',\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "_snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "matDialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [
        {
            "name": "HttpActivityInterceptor",
            "id": "injectable-HttpActivityInterceptor-38546a75f77ada37f23e03c0aa422a6d0310f50cfc16bd0de49eea063604cbdf7aaaf96848a1a15b0769a769c7738e82bb9e6e47e24d6c74d4c9f09fcd2103cd",
            "file": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpActivityService } from './http-activity.service';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n@Injectable()\r\nexport class HttpActivityInterceptor implements HttpInterceptor {\r\n  constructor(private service: HttpActivityService) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    const me = this;\r\n    me.service.showIndicator();\r\n    return next.handle(request).pipe(\r\n      finalize(() => {\r\n        me.service.hideIndicator();\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "HttpActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "HttpActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "StoreService",
            "id": "class-StoreService-ae225d8ba23bb1f04d2ee3f43dc69a53a3089871f2286a99d8709504e4f48d7cdb0e3ae6e5d492e4309e9c52f6ad5e3d8ff5c464e829dafb36ca008da9fefc5a",
            "file": "projects/ngx-kit-business/components/src/store-service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class StoreService {\r\n\r\n  protected static getApiUrl(): string {\r\n    return 'http://localhost:3000';\r\n  }\r\n  get(id: string): any {\r\n    return null;\r\n  }\r\n  list(): any {\r\n    return null;\r\n  }\r\n  create(data: any): any {\r\n    return null;\r\n  }\r\n  update(id: string, data: any): any {\r\n    return null;\r\n  }\r\n  delete(id: string): any {\r\n    return null;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getApiUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122,
                        124
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StringUtils",
            "id": "class-StringUtils-cbc960c61b3f852090129d620b3b69f34ccfea152da0b0f2b146d9d6fb87058234fd02f457d535817d77f5c2b5f778c376c16588ac852b47d05d53ade283e150",
            "file": "projects/ngx-kit-business/components/src/utils/string-utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class StringUtils {\r\n  /**\r\n   * Example:\r\n   * ```\r\n   *  StringUtils.format('hello {0}', 'world');\r\n   * ```\r\n   *\r\n   * @param tpl\r\n   * @param args\r\n   */\r\n  static format(tpl: string, ...args: any[]) {\r\n    args.forEach((value, idx) => {\r\n      const re = new RegExp('\\\\{' + idx + '\\\\}', 'g');\r\n      tpl = tpl.replace(re, value);\r\n    });\r\n    return tpl;\r\n  }\r\n\r\n  static compileTpl(tpl: string, tplData: { [key: string]: any }) {\r\n    return tpl.replace(/\\{([^}]+)\\}/g, (_, key) => {\r\n      return tplData[key];\r\n    });\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "compileTpl",
                    "args": [
                        {
                            "name": "tpl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tplData",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "tpl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tplData",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "tpl",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "args",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExample:\n```\n StringUtils.format('hello {0}', 'world');\n```\n\n",
                    "description": "<p>Example:</p>\n<div><pre class=\"line-numbers\"><code class=\"language-none\"> StringUtils.format(&#39;hello {0}&#39;, &#39;world&#39;);</code></pre></div>",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 137,
                                "end": 140,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "tpl"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 131,
                                "end": 136,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 154,
                                "end": 158,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "args"
                            },
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "dotDotDotToken": true,
                            "tagName": {
                                "pos": 148,
                                "end": 153,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "XhrInfo",
            "id": "class-XhrInfo-05e2b4cd044f7aee49c2d353c6b00585aa94b17cad620e5101392ab11c74805228e77f81e6bafa84eb85ccaf2befccbf4ff59f65d31bb25cd0aa3830814524f9",
            "file": "projects/ngx-kit-business/components/src/services/xhr-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { HttpStatusCode } from '@angular/common/http';\r\nimport { HttpStatusMessages } from './http-statuses.message';\r\n\r\nexport class XhrInfo {\r\n  /**\r\n   * true is status = 400\r\n   */\r\n  static isBadRequest(xhr: XMLHttpRequest) {\r\n    return xhr.status == HttpStatusCode.BadRequest;\r\n  }\r\n  /**\r\n   * true is status = 401\r\n   */\r\n  static isUnauthorized(xhr: XMLHttpRequest) {\r\n    return xhr.status == HttpStatusCode.Unauthorized;\r\n  }\r\n  /**\r\n   * true is status = 403\r\n   */\r\n  static isForbidden(xhr: XMLHttpRequest) {\r\n    return xhr.status == HttpStatusCode.Forbidden;\r\n  }\r\n  static getStatusMessage(status: HttpStatusCode | 0) {\r\n    return HttpStatusMessages[status] || `Error status: ${status}`;\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getStatusMessage",
                    "args": [
                        {
                            "name": "status",
                            "type": "HttpStatusCode | \"0\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "HttpStatusCode | \"0\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isBadRequest",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntrue is status = 400\n",
                    "description": "<p>true is status = 400</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isForbidden",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntrue is status = 403\n",
                    "description": "<p>true is status = 403</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUnauthorized",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ntrue is status = 401\n",
                    "description": "<p>true is status = 401</p>\n",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "XMLHttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "FiltersContainerComponent",
            "id": "directive-FiltersContainerComponent-e022bf79d6923baf8b05a35107285c18c98689b841285d00172f9aad1d56c0e4490f2bffc33ce8c2fbd3628f7e8e4120ce1dcc00df009ac0c11f87b816b4ff5d",
            "file": "projects/ngx-kit-business/components/src/filters-container.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Output, EventEmitter, Directive } from '@angular/core';\r\nimport { CollectionFilter, ComparisonOperator, } from 'ngx-kit-business/types';\r\n\r\n@Directive()\r\nexport class FiltersContainerComponent {\r\n  filters: CollectionFilter[] = [];\r\n  searchFilter!: CollectionFilter;\r\n\r\n  @Output() filtersChange: EventEmitter<CollectionFilter[]> = new EventEmitter();\r\n  @Output() searchFilterChange: EventEmitter<CollectionFilter> = new EventEmitter();\r\n\r\n  setFilterValue(\r\n    id: string,\r\n    value: any,\r\n    active?: boolean,\r\n    operator?: ComparisonOperator\r\n  ) {\r\n    const me = this;\r\n    let filter = me.getFilter(id);\r\n    if (filter) {\r\n      filter.value = value;\r\n      filter.active = true;\r\n      filter.operator = operator ? operator : filter.operator;\r\n      // Posibilidades de desactivar el filtro\r\n      if (\r\n        filter.type == 'string' &&\r\n        (!value || value == filter.inactiveOnValue)\r\n      ) {\r\n        filter.active = false;\r\n      }\r\n      if (filter.type == 'numeric' && value == filter.inactiveOnValue) {\r\n        filter.active = false;\r\n      }\r\n      if (filter.type == 'list' && (!value || !value.length)) {\r\n        filter.active = false;\r\n      }\r\n      if (filter.type == 'date' && (!value || !value.length)) {\r\n        filter.active = false;\r\n      }\r\n      // El valor active predomina si es establecido esplicitamente\r\n      if (active === true || active === false) {\r\n        filter.active = active;\r\n      }\r\n    }\r\n    me.fireEvent();\r\n  }\r\n  setSearchFilterValue(value: string) {\r\n    this.searchFilter = { ...this.searchFilter, value };\r\n    this.searchFilterChange.emit(this.searchFilter);\r\n  }\r\n  activeFilter(field: string, active: boolean) {\r\n    const me = this;\r\n    me.filters.forEach((item) => {\r\n      if (item.field == field) {\r\n        item.active = !!active;\r\n      }\r\n    });\r\n  }\r\n  addOrRemoveListFilterItemValue(id: string, itemValue: any, add: boolean) {\r\n    const me = this;\r\n    let newValue = [];\r\n    let filter = me.getFilter(id);\r\n    if (filter) {\r\n      newValue = filter.value || [];\r\n      // Add value\r\n      if (add) {\r\n        // Valor no est√° en la lista\r\n        if (newValue.indexOf(itemValue) == -1) {\r\n          newValue.push(itemValue);\r\n        }\r\n      }\r\n      // Remove value\r\n      else {\r\n        newValue = newValue.filter((value: any) => value != itemValue);\r\n      }\r\n      filter.value = newValue;\r\n    }\r\n    me.fireEvent();\r\n  }\r\n\r\n  fireEvent() {\r\n    this.filtersChange.emit(this.getActiveFilters());\r\n  }\r\n\r\n  /**\r\n   * Retorna solo los filtros activos\r\n   */\r\n  getActiveFilters() {\r\n    let out = this.filters.filter((filter) => {\r\n      if (filter.type == 'list') {\r\n        return filter.value && filter.value.length;\r\n      }\r\n      return filter.active;\r\n    });\r\n    return out;\r\n  }\r\n  getFilter(id: string): CollectionFilter | null {\r\n    const me = this;\r\n    let out = null;\r\n    me.filters.forEach((item) => {\r\n      if (item.id == id) {\r\n        out = item;\r\n      }\r\n    });\r\n    return out;\r\n  }\r\n}\r\n",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "filtersChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<CollectionFilter[]>"
                },
                {
                    "name": "searchFilterChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<CollectionFilter>"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "searchFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionFilter",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methodsClass": [
                {
                    "name": "activeFilter",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addOrRemoveListFilterItemValue",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "add",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "add",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fireEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getActiveFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetorna solo los filtros activos\n",
                    "description": "<p>Retorna solo los filtros activos</p>\n"
                },
                {
                    "name": "getFilter",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CollectionFilter | null",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFilterValue",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "operator",
                            "type": "ComparisonOperator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operator",
                            "type": "ComparisonOperator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setSearchFilterValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "FormDialogComponent",
            "id": "directive-FormDialogComponent-1b706831ddb36414ba34cafc5b33063b3e4fa2166667c22d681c800637f69f43587f7ccfcd2e624b7f28cdf958a43a3aa430ae8826694054eda413759709b09f",
            "file": "projects/ngx-kit-business/components/src/form-dialog.component.ts",
            "type": "directive",
            "description": "<p>Form Component\nEDITAR Y GUARDAR\nClase base para todos los formularios</p>\n",
            "rawdescription": "\n\nForm Component\nEDITAR Y GUARDAR\nClase base para todos los formularios\n",
            "sourceCode": "import {\r\n  UntypedFormGroup,\r\n  AbstractControl,\r\n  Validators,\r\n  UntypedFormBuilder,\r\n} from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { OnInit, Directive, Injector, HostBinding } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogService } from './services/dialog.service';\r\nimport { NotificationsService } from './services/notifications.service';\r\nimport { EMAIL_PATTERN, FormBuilderHelper, FormField, FormFieldOptions, URL_PATTERN } from './form-builder-helper';\r\n\r\n/**\r\n * Form Component\r\n * EDITAR Y GUARDAR\r\n * Clase base para todos los formularios\r\n */\r\n@Directive()\r\nexport class FormDialogComponent<T> implements OnInit {\r\n  @HostBinding('class')\r\n  hostCls: string = 'ngbiz-custom-material__mat-dialog--form';\r\n  mode!: 'add' | 'edit';\r\n  //\r\n  data: any = {};\r\n  parent: any = {};\r\n  model: T;\r\n  modelIdProperty = 'id';\r\n\r\n  apiUrl: string = '';\r\n  dataPath: string = '';\r\n  // Texts\r\n  fieldRequiredErrorMessageText = 'Requerido';\r\n  msgSuccessfulCreateText = 'Creado correctamente';\r\n  msgSuccessfulUpdateText = 'Actualizado correctamente';\r\n  invalidValuesMessage =\r\n    'Complete los campos requeridos y corrija los errores identificados';\r\n  /**\r\n   * FormGrup asignado al formulario\r\n   */\r\n  formModel!: UntypedFormGroup;\r\n  protected formFields: { [key: string]: FormFieldOptions } = {};\r\n  /**\r\n   * Si es true se usar√° el metodo getRawValue() obtener los valores del formulari\r\n   * caso contrario solo se usar√° la propiedad value.\r\n   */\r\n  useFormRawValue!: boolean;\r\n  /**\r\n   * Llamar al metodo buildFormModel al inicio.\r\n   */\r\n  buildFormModelOnInit: boolean = true;\r\n\r\n  /**\r\n   * @cfg\r\n   * Definir los campos que tendr√° el formulario\r\n   */\r\n  protected fields: FormField[] = [];\r\n\r\n  /**\r\n   * Valores iniciales del fomulario\r\n   */\r\n  protected values: any;\r\n  // Services\r\n  protected api;\r\n  protected notifications: NotificationsService;\r\n  protected formBuilder: UntypedFormBuilder;\r\n  protected dialogService: DialogService;\r\n  protected fbHelper: FormBuilderHelper;\r\n  protected dialogRef: MatDialogRef<any>;\r\n  _isReady!: boolean;\r\n  _isSaving!: boolean;\r\n  constructor(\r\n    protected injector: Injector,\r\n    api: any,\r\n    dialogRef: any,\r\n    inputData: any\r\n  ) {\r\n    this.notifications = injector.get(NotificationsService);\r\n    this.formBuilder = injector.get(UntypedFormBuilder);\r\n    this.dialogService = injector.get(DialogService);\r\n    this.fbHelper = injector.get(FormBuilderHelper);\r\n    this.api = api;\r\n    this.dialogRef = dialogRef;\r\n    this.model = inputData?.model ? inputData.model : this.createModel();\r\n    this.parent = inputData ? inputData.parent : {};\r\n    this.data = inputData ? inputData.data : {};\r\n  }\r\n\r\n  createModel() {\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Enviar datos\r\n   */\r\n  onSubmit() {\r\n    const me = this;\r\n    // Si esta guardando.\r\n    if (me._isSaving) {\r\n      return;\r\n    }\r\n    // Si los datos son incorrectos\r\n    if (!me.isValid()) {\r\n      me.showInvalidValuesMessage();\r\n      return;\r\n    }\r\n    me.setStatusSaving();\r\n    let postModel = me.getPostData();\r\n    me.getSaveService(postModel).subscribe(\r\n      (rec) => {\r\n        me.notifications.snackSuccess(\r\n          me.isCreationMode()\r\n            ? me.msgSuccessfulCreateText\r\n            : me.msgSuccessfulUpdateText\r\n        );\r\n        me.dialogRef.close(rec);\r\n      },\r\n      (xhr) => {\r\n        if (xhr.status == 401) {\r\n          me.dialogRef.close();\r\n          return;\r\n        }\r\n        me.handleServerError(xhr);\r\n        me.setStatusReady();\r\n      }\r\n    );\r\n  }\r\n\r\n  isNew() {\r\n    return this.mode == 'add';\r\n  }\r\n\r\n  getSaveService(model: any): Observable<any> {\r\n    return this.api.save(model, model[this.modelIdProperty]);\r\n  }\r\n\r\n  showInvalidValuesMessage() {\r\n    const me = this;\r\n    me.notifications.snackWarning(me.invalidValuesMessage);\r\n  }\r\n\r\n  /**\r\n   * Este metodo puede ser sobre escrito para manejar internamente las excepciones del servidor\r\n   */\r\n  handleServerError(xhr: any) {\r\n    this.notifications.handleXhrError(xhr, this);\r\n  }\r\n\r\n  isCreationMode() {\r\n    return this.mode == 'add';\r\n  }\r\n\r\n  isEditionMode() {\r\n    return this.mode == 'edit';\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const me = this;\r\n    me.mode = me.model && (me.model as any)[me.modelIdProperty] ? 'edit' : 'add';\r\n    if (me.buildFormModelOnInit) {\r\n      me.defineFormModel();\r\n    }\r\n  }\r\n\r\n  isValid() {\r\n    return this.formModel.valid;\r\n  }\r\n\r\n  /**\r\n   * Este metodo retorna los campos que son enviados al servidor\r\n   */\r\n  getPostData() {\r\n    const me = this;\r\n    if (this.useFormRawValue) {\r\n      return { ...me.model, ...me.formModel.getRawValue() };\r\n    }\r\n    return { ...me.model, ...me.formModel.value };\r\n  }\r\n  /**\r\n   * Permite determinar si el campo debe incluirse en el formulario\r\n   * @param field\r\n   * @returns\r\n   */\r\n  hasField(field: string): boolean {\r\n    return this.formFields && this.formFields.hasOwnProperty(field);\r\n  }\r\n  /**\r\n   * Retorna el campo del formulario solicitado\r\n   * @param name\r\n   */\r\n  getFormControl(name: string): AbstractControl | null {\r\n    return this.formModel.get(name);\r\n  }\r\n\r\n  getFieldProperty(fieldName: string, prop: keyof FormFieldOptions) {\r\n    return this.formFields[fieldName] ? this.formFields[fieldName][prop] : null;\r\n  }\r\n\r\n  hasError(fieldName: string, errorType: string) {\r\n    return this.getFormControl(fieldName)?.hasError(errorType);\r\n  }\r\n\r\n  isFieldRequired(fieldName: string) {\r\n    return this.hasError(fieldName, 'required');\r\n  }\r\n\r\n  hasMinLengthError(fieldName: string) {\r\n    return this.hasError(fieldName, 'minlength');\r\n  }\r\n\r\n  hasMaxLengthError(fieldName: string) {\r\n    return this.hasError(fieldName, 'maxlength');\r\n  }\r\n\r\n  hasPatternError(fieldName: string) {\r\n    return this.hasError(fieldName, 'pattern');\r\n  }\r\n\r\n  getRequiredErrorMessage(_fieldName: string = '') {\r\n    return this.fieldRequiredErrorMessageText;\r\n  }\r\n\r\n  getMinLengthErrorMessage(fieldName: string) {\r\n    return `M√≠n ${this.getFieldProperty(fieldName, 'minLength')} caracteres.`;\r\n  }\r\n\r\n  getMaxLengthErrorMessage(fieldName: string) {\r\n    return `M√°x ${this.getFieldProperty(fieldName, 'maxLength')} caracteres.`;\r\n  }\r\n\r\n  shouldShowErrorMessage(fieldName: string) {\r\n    const me = this;\r\n    let control = me.getFormControl(fieldName);\r\n    return control && control.invalid && (control.dirty || control.touched);\r\n  }\r\n\r\n  getFieldValue(field: string) {\r\n    return this.getFormControl(field)?.value;\r\n  }\r\n\r\n  setFieldValue(field: string, value: any) {\r\n    this.getFormControl(field)?.setValue(value);\r\n  }\r\n\r\n  isFieldValid(field: string) {\r\n    return this.getFormControl(field)?.valid;\r\n  }\r\n\r\n  private buildFormModel() {\r\n    const me = this;\r\n    let formGroupObjet: any = {},\r\n      fieldValue,\r\n      fieldPropsObj;\r\n    me.fields.forEach((field) => {\r\n      field = me.preProcessDefinedField(field);\r\n      fieldValue = (me.model as any)[field.name];\r\n      fieldValue = fieldValue !== undefined ? fieldValue : field.defaultValue;\r\n      // disabled Field\r\n      if (field.disabled) {\r\n        fieldPropsObj = { value: fieldValue, disabled: true };\r\n      } else {\r\n        fieldPropsObj = fieldValue;\r\n      }\r\n      formGroupObjet[field.name] = [fieldPropsObj, me.getValidators(field)];\r\n    });\r\n    if (me.formBuilder) me.formModel = me.formBuilder.group(formGroupObjet);\r\n  }\r\n\r\n  defineFormModel() {\r\n    const me = this;\r\n    const fields: any = {};\r\n    for (const fieldName of Object.keys(me.formFields)) {\r\n      fields[fieldName] = me.transformDefinedField(fieldName, me.formFields[fieldName]);\r\n    }\r\n    me.formModel = me.fbHelper.buildFormModel(\r\n      fields,\r\n      me.getValuesForFormModel(me.model),\r\n    );\r\n  }\r\n\r\n  /**\r\n * Permite modificar la definici√≥n original del campo antes de construir el formControl\r\n * @param field\r\n * @returns\r\n */\r\n  protected transformDefinedField(_fieldName: string, field: FormFieldOptions) {\r\n    return field;\r\n  }\r\n\r\n  /**\r\n   * Permite modificar los valores que se usar√°n para construir el formControl\r\n   * @param field\r\n   * @returns\r\n   */\r\n  protected getValuesForFormModel(values: T): any {\r\n    return values;\r\n  }\r\n\r\n  protected updateForm() {\r\n    this.buildFormModel();\r\n  }\r\n\r\n  /**\r\n   * Permite modificar la definici√≥n original del campo antes de construir un formControl\r\n   * @param field\r\n   * @returns\r\n   */\r\n  protected preProcessDefinedField(field: FormField) {\r\n    return field;\r\n  }\r\n\r\n  /**\r\n   * Retronar un arreglo de validadores\r\n   * @param field\r\n   */\r\n  private getValidators(field: FormField) {\r\n    let out = [];\r\n    if (field.required) {\r\n      out.push(Validators.required);\r\n    }\r\n    if (field.min) {\r\n      out.push(Validators.min(field.min));\r\n    }\r\n    if (field.max) {\r\n      out.push(Validators.max(field.max));\r\n    }\r\n    if (field.minLength) {\r\n      out.push(Validators.minLength(field.minLength));\r\n    }\r\n    if (field.maxLength) {\r\n      out.push(Validators.maxLength(field.maxLength));\r\n    }\r\n    if (field.email) {\r\n      out.push(Validators.email);\r\n    }\r\n    if (field.emailPattern) {\r\n      out.push(Validators.pattern(EMAIL_PATTERN));\r\n    }\r\n    if (field.urlPattern) {\r\n      out.push(Validators.pattern(URL_PATTERN));\r\n    }\r\n    if (field.pattern) {\r\n      out.push(Validators.pattern(field.pattern));\r\n    }\r\n    if (field.customValidation) {\r\n      out.push(field.customValidation);\r\n    }\r\n    return out;\r\n  }\r\n\r\n  setFieldDisabled(fieldName: string, disabled: boolean) {\r\n    const me = this;\r\n    me.fields = me.fields.map((field) => {\r\n      if (field.name == fieldName) {\r\n        field.disabled = disabled;\r\n      }\r\n      return field;\r\n    });\r\n    me.updateForm();\r\n  }\r\n\r\n  // Estado por defecto\r\n  setStatusReady() {\r\n    this._isReady = true;\r\n    this._isSaving = false;\r\n  }\r\n\r\n  // Guardando...\r\n  setStatusSaving() {\r\n    this._isSaving = true;\r\n    this._isReady = false;\r\n  }\r\n\r\n  // Cierra inmediatamente la interfaz\r\n  protected __forceClose() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  getApiUrl() {\r\n    return this.apiUrl;\r\n  }\r\n\r\n  getDataPath() {\r\n    return this.dataPath;\r\n  }\r\n\r\n  getCollectionUrl() {\r\n    return this.getApiUrl() + '/' + this.getDataPath();\r\n  }\r\n\r\n}\r\n",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class",
                    "defaultValue": "'ngbiz-custom-material__mat-dialog--form'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_isReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "_isSaving",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "api",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "buildFormModelOnInit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Llamar al metodo buildFormModel al inicio.</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nLlamar al metodo buildFormModel al inicio.\n"
                },
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "dataPath",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogService",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fbHelper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilderHelper",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fieldRequiredErrorMessageText",
                    "defaultValue": "'Requerido'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "fields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormField[]",
                    "optional": false,
                    "description": "<p>Definir los campos que tendr√° el formulario</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nDefinir los campos que tendr√° el formulario\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "pos": 1678,
                            "end": 1737,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 1679,
                                "end": 1682,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "cfg"
                            },
                            "comment": "<p>Definir los campos que tendr√° el formulario</p>\n"
                        }
                    ]
                },
                {
                    "name": "formBuilder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "formFields",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "formModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UntypedFormGroup",
                    "optional": false,
                    "description": "<p>FormGrup asignado al formulario</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nFormGrup asignado al formulario\n"
                },
                {
                    "name": "hostCls",
                    "defaultValue": "'ngbiz-custom-material__mat-dialog--form'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "HostBinding",
                            "stringifiedArguments": "'class'"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "invalidValuesMessage",
                    "defaultValue": "'Complete los campos requeridos y corrija los errores identificados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"add\" | \"edit\"",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "modelIdProperty",
                    "defaultValue": "'id'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "msgSuccessfulCreateText",
                    "defaultValue": "'Creado correctamente'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "msgSuccessfulUpdateText",
                    "defaultValue": "'Actualizado correctamente'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationsService",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "parent",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "useFormRawValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Si es true se usar√° el metodo getRawValue() obtener los valores del formulari\ncaso contrario solo se usar√° la propiedad value.</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nSi es true se usar√° el metodo getRawValue() obtener los valores del formulari\ncaso contrario solo se usar√° la propiedad value.\n"
                },
                {
                    "name": "values",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Valores iniciales del fomulario</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nValores iniciales del fomulario\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "__forceClose",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 375,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "buildFormModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createModel",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "defineFormModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getApiUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 379,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCollectionUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFieldProperty",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "prop",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "prop",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFieldValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFormControl",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "AbstractControl | null",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetorna el campo del formulario solicitado\n",
                    "description": "<p>Retorna el campo del formulario solicitado</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5059,
                                "end": 5063,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5053,
                                "end": 5058,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMaxLengthErrorMessage",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMinLengthErrorMessage",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPostData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEste metodo retorna los campos que son enviados al servidor\n",
                    "description": "<p>Este metodo retorna los campos que son enviados al servidor</p>\n"
                },
                {
                    "name": "getRequiredErrorMessage",
                    "args": [
                        {
                            "name": "_fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSaveService",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValidators",
                    "args": [
                        {
                            "name": "field",
                            "type": "FormField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 316,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetronar un arreglo de validadores\n",
                    "description": "<p>Retronar un arreglo de validadores</p>\n",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8552,
                                "end": 8557,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "field"
                            },
                            "type": "FormField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8546,
                                "end": 8551,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getValuesForFormModel",
                    "args": [
                        {
                            "name": "values",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 295,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermite modificar los valores que se usar√°n para construir el formControl\n",
                    "description": "<p>Permite modificar los valores que se usar√°n para construir el formControl</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "values",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 8112,
                                "end": 8119,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "handleServerError",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEste metodo puede ser sobre escrito para manejar internamente las excepciones del servidor\n",
                    "description": "<p>Este metodo puede ser sobre escrito para manejar internamente las excepciones del servidor</p>\n",
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasError",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "errorType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "errorType",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasField",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermite determinar si el campo debe incluirse en el formulario\n",
                    "description": "<p>Permite determinar si el campo debe incluirse en el formulario</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4849,
                                "end": 4854,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "field"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4843,
                                "end": 4848,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4862,
                                "end": 4869,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasMaxLengthError",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasMinLengthError",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasPatternError",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCreationMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEditionMode",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFieldRequired",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isFieldValid",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNew",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isValid",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEnviar datos\n",
                    "description": "<p>Enviar datos</p>\n"
                },
                {
                    "name": "preProcessDefinedField",
                    "args": [
                        {
                            "name": "field",
                            "type": "FormField",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormField",
                    "typeParameters": [],
                    "line": 308,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermite modificar la definici√≥n original del campo antes de construir un formControl\n",
                    "description": "<p>Permite modificar la definici√≥n original del campo antes de construir un formControl</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8381,
                                "end": 8386,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "field"
                            },
                            "type": "FormField",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8375,
                                "end": 8380,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 8394,
                                "end": 8401,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setFieldDisabled",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 351,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "disabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setFieldValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStatusReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStatusSaving",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 369,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldShowErrorMessage",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInvalidValuesMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformDefinedField",
                    "args": [
                        {
                            "name": "_fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "FormFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormFieldOptions",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPermite modificar la definici√≥n original del campo antes de construir el formControl\n",
                    "description": "<p>Permite modificar la definici√≥n original del campo antes de construir el formControl</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "_fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": {
                                "pos": 7867,
                                "end": 7872,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "field"
                            },
                            "type": "FormFieldOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7861,
                                "end": 7866,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 7878,
                                "end": 7885,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "api",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inputData",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "api",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputData",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TableViewComponent",
            "id": "directive-TableViewComponent-95071166ece7e4e121c3e4fb59d403cf4b66bb469b34457e5e0d90570fc23cafefdb14525578e5e80285394616daaeea9a88c2074d9f1a40e7b7ac7cbc954013",
            "file": "projects/ngx-kit-business/components/src/table-view.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  OnInit,\r\n  Injector,\r\n  ViewChild,\r\n  AfterViewInit,\r\n  Directive,\r\n  HostListener,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { NotificationsService } from './services/notifications.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTable } from '@angular/material/table';\r\nimport { DialogService } from './services/dialog.service';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { SelectionModel } from '@angular/cdk/collections';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\n\r\nimport { HttpCollectionService, CollectionQueryParams, QueryFilter, CollectionResponse } from 'ngx-kit-business/http';\r\nimport { DataErrorViewComponent } from './data-error-view/data-error-view.component';\r\n\r\nimport { of, Subscription, Subject } from 'rxjs';\r\nimport { switchMap, catchError } from 'rxjs/operators';\r\nimport { StringUtils } from './utils/string-utils';\r\n\r\n\r\nenum COMPONENT_TYPE {\r\n  PAGE = 'page',\r\n  COMPONENT = 'component',\r\n}\r\n@Directive()\r\nexport class TableViewComponent<T> implements OnInit, AfterViewInit {\r\n  @Output() selectionChange = new EventEmitter<any[]>();\r\n  /**\r\n   * Tipo de componente\r\n   *  - page: Si el componente que extiende est√° asociado con una ruta.\r\n   *  - component: Si el componente extendido esta dentro de otro componente\r\n   *\r\n   */\r\n  protected type: string = 'page';\r\n  // @config llama a loadData inmediatamente\r\n  autoload = true;\r\n  apiUrl: string = '';\r\n  sendModelOnDelete = false;\r\n  requestParams: { [key: string]: string | number | boolean } = {};\r\n  dataPath: string = '';\r\n  displayedColumns: string[] = [];\r\n  itemSingularName: string = '√≠tem';\r\n  itemPluralName: string = '√≠tems';\r\n  itemSingularArticle: string = 'el';\r\n  // Si se asigna un valor a la propiedad en una subclase, ya no se usar√° confirmDeleteTitleTpl\r\n  confirmDeleteTitle: string = '';\r\n  confirmDeleteTitleTpl = 'Eliminar {itemName}';\r\n  deleteItemQuestionText = '';\r\n  deleteItemQuestionTextTpl = '¬øSeguro que desea eliminar {itemArticle} {itemName}?';\r\n  deleteItemConfirmDialogContentTpl = '{question}<div class=\"mt-2\"><strong style=\"text-transform: capitalize;\">{itemName}</strong></div>';\r\n  deleteItemConfirmButtonText = 'ELIMINAR';\r\n  successfullyDeletedItemNotificationTpl = '{itemName} eliminado correctamente';\r\n  protected editorClass: any;\r\n  protected editionDisabled = false;\r\n\r\n  // Propiedades disponibles\r\n  pageSize = 25;\r\n  pageIndex = 0;\r\n  // Guarda una copia del array de datos recibidos del servicio,\r\n  // Nota: solo se clonan los objetos de primer nivel usando\r\n  // map(e => { return { ...e } });\r\n  _rawData!: T[];\r\n  // Guarda una copia de la data que ha pasado por el metodo transformServiceResponseData\r\n  _rawTransformedData!: T[];\r\n  // Contiene la data que es visualizada en la interfaz\r\n  data!: T[];\r\n  selectedRow: any;\r\n  totalRecords = 0;\r\n  selectedRowIndex: number = -1;\r\n  selection: SelectionModel<any>;\r\n  selectionMultiple: boolean = false;\r\n  modelIdProperty = 'id';\r\n  modelNameProperty = 'name';\r\n  // Services\r\n  protected notifications: NotificationsService;\r\n  protected http: HttpClient;\r\n  protected matDialog: MatDialog;\r\n  protected dialogService: DialogService;\r\n  protected httpGetList: HttpCollectionService;\r\n  protected router: Router;\r\n  protected route: ActivatedRoute;\r\n\r\n  // Child components\r\n  @ViewChild(MatTable) table?: MatTable<any>;\r\n  @ViewChild(MatSort) sort?: MatSort;\r\n  @ViewChild(MatPaginator) paginator?: MatPaginator;\r\n  @ViewChild(DataErrorViewComponent) errorView?: DataErrorViewComponent;\r\n  filters: QueryFilter[] = [];\r\n  $fields: string = '';\r\n  localSearchFilter!: QueryFilter;\r\n  searchFilter!: QueryFilter;\r\n  // Propiedades de estado\r\n  _isLoadingData = false;\r\n  _didLoadDataFailed = false;\r\n  _loadSubcription?: Subscription;\r\n\r\n  //\r\n  clearDataOnFail = true;\r\n  private loadObs = new Subject();\r\n  public load = this.loadObs.asObservable();\r\n  private errorStatus: number = 0;\r\n  constructor(protected injector: Injector) {\r\n    this.notifications = injector.get(NotificationsService);\r\n    this.http = injector.get(HttpClient);\r\n    this.httpGetList = injector.get(HttpCollectionService);\r\n    this.matDialog = injector.get(MatDialog);\r\n    this.router = injector.get(Router);\r\n    this.route = injector.get(ActivatedRoute);\r\n    this.dialogService = injector.get(DialogService);\r\n    // Selection model\r\n    this.selection = new SelectionModel<any>(this.selectionMultiple, []);\r\n  }\r\n  // Keyboard listeners\r\n  @HostListener('window:keyup', ['$event'])\r\n  keyEvent(e: KeyboardEvent) {\r\n    const me = this;\r\n    if ((e.target as Element).tagName != 'BODY') {\r\n      return;\r\n    }\r\n    // Reload data\r\n    if (e.code === 'KeyA') {\r\n      me.loadData();\r\n      return;\r\n    }\r\n    // Open editor\r\n    if (e.code === 'Enter' && me.getSelection().length == 1 && me.editorClass) {\r\n      me.editItemHandler(me.selection.selected[0]);\r\n      return;\r\n    }\r\n    // Select Next\r\n    if (e.code === 'ArrowDown' && me.getSelection().length == 1) {\r\n      me.selectNext();\r\n      return;\r\n    }\r\n    // Select Previus\r\n    if (e.code === 'ArrowUp' && me.getSelection().length == 1) {\r\n      me.selectPrevious();\r\n    }\r\n  }\r\n\r\n  loadData() {\r\n    this.loadObs.next(null);\r\n  }\r\n\r\n  _subscribeLoadEvent() {\r\n    const me = this;\r\n    me._loadSubcription = me.load\r\n      .pipe(\r\n        switchMap(() => {\r\n          me.beforeLoad();\r\n          me._isLoadingData = true;\r\n          me._didLoadDataFailed = false;\r\n          return me.httpGetList\r\n            .get<CollectionResponse<T>>(me.getRequestUrl(), me.getBaseRequestParams())\r\n            .pipe(\r\n              catchError((xhr) => {\r\n                me._isLoadingData = false;\r\n                me._didLoadDataFailed = true;\r\n                me.handleServerError(xhr);\r\n                return of(null);\r\n              })\r\n            );\r\n        })\r\n      )\r\n      .subscribe(me.onDataServiceResponse.bind(me));\r\n  }\r\n  onDataServiceResponse(res: any) {\r\n    const me = this;\r\n    // When error has happened and was catched by catchError\r\n    if (me._didLoadDataFailed) return;\r\n\r\n    let data: T[] = [],\r\n      total = 0;\r\n    // res: {data: any[], total: number }\r\n    if (\r\n      Object.prototype.toString.call(res) == '[object Object]' &&\r\n      Array.isArray(res.data)\r\n    ) {\r\n      data = res.data;\r\n      if (isNaN(res.total)) {\r\n        total = data.length;\r\n      } else {\r\n        total = +res.total > data.length ? +res.total : data.length;\r\n      }\r\n    }\r\n    // res: any[]\r\n    else if (Array.isArray(res)) {\r\n      data = res;\r\n      total = res.length;\r\n    }\r\n    me._rawData = data.map(e => { return { ...e } });\r\n    me._rawTransformedData = me.transformServiceResponseData(data);\r\n    me.data = me._rawTransformedData.map(e => { return { ...e } });\r\n\r\n    me.totalRecords = total;\r\n    me._isLoadingData = false;\r\n  }\r\n  transformServiceResponseData(data: any[]) {\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Hook\r\n   * Es llamado antes de solicitar datos al servidor\r\n   */\r\n  beforeLoad() { }\r\n\r\n  getSelection() {\r\n    const me = this;\r\n    let selection = me.selection.selected;\r\n    if (selection.length) {\r\n      // Single selection\r\n      if (!me.selectionMultiple) {\r\n        if (me.recordExists(selection[0])) {\r\n          return selection;\r\n        }\r\n        me.selection.clear();\r\n        return [];\r\n      } else {\r\n        selection = selection.filter((item) => me.recordExists(item));\r\n        me.selection.clear();\r\n        selection.forEach((item) => me.selection.select(item));\r\n      }\r\n    }\r\n    return me.selection.selected;\r\n  }\r\n\r\n  recordExists(rec: any) {\r\n    let out = false;\r\n    let data = this.data || [];\r\n    data.forEach((item: any) => {\r\n      if (item == rec) {\r\n        out = true;\r\n      }\r\n    });\r\n    return out;\r\n  }\r\n\r\n  getRecordByIndex(idx: number) {\r\n    let data = this.data || [];\r\n    return data[idx] ? data[idx] : null;\r\n  }\r\n\r\n  getRecordIndex(rec: any) {\r\n    let out = -1;\r\n    let data = this.data || [];\r\n    data.forEach((item: any, idx: number) => {\r\n      if (item === rec) {\r\n        out = idx;\r\n      }\r\n    });\r\n    return out;\r\n  }\r\n\r\n  selectNext() {\r\n    const me = this;\r\n    // Matener condicionales separadas\r\n    if (!me.selection.hasValue()) {\r\n      return;\r\n    }\r\n    if (me.selectionMultiple) {\r\n      return;\r\n    }\r\n    let index = me.getRecordIndex(me.selection.selected[0]);\r\n    if (me.validIndex(index)) {\r\n      let nextRec = me.getRecordByIndex(index + 1);\r\n      if (nextRec) {\r\n        me.selection.select(nextRec);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectPrevious() {\r\n    const me = this;\r\n    // Matener condicionales separadas\r\n    if (!me.selection.hasValue()) {\r\n      return;\r\n    }\r\n    if (me.selectionMultiple) {\r\n      return;\r\n    }\r\n    let index = me.getRecordIndex(me.selection.selected[0]);\r\n    if (me.validIndex(index)) {\r\n      let nextRec = me.getRecordByIndex(index - 1);\r\n      if (nextRec) {\r\n        me.selection.select(nextRec);\r\n      }\r\n    }\r\n  }\r\n\r\n  validIndex(index: number) {\r\n    return index != -1;\r\n  }\r\n\r\n  getBaseRequestParams(): CollectionQueryParams {\r\n    const me = this,\r\n      paginator = me.paginator,\r\n      sorter = me.sort,\r\n      filters = me.getFilters(),\r\n      fields = me.$fields;\r\n    let out: CollectionQueryParams = {};\r\n    // Paginaci√≥n\r\n    if (paginator) {\r\n      out.page = paginator.pageIndex + 1;\r\n      out.limit = paginator.pageSize;\r\n    } else {\r\n      out.page = me.pageIndex + 1;\r\n      out.limit = me.pageSize;\r\n    }\r\n    // Query\r\n    if (me.searchFilter?.value) {\r\n      out.query = me.searchFilter?.value;\r\n    }\r\n    // Filters\r\n    if (filters && filters.length) {\r\n      out.filters = filters;\r\n    }\r\n    // Sorters\r\n    // Por ahora solo est√° soportando un simple sort\r\n    if (sorter && sorter.active && sorter.direction) {\r\n      out.sorters = [{ field: sorter.active, direction: sorter.direction }];\r\n    }\r\n    if (fields) {\r\n      out.fields = fields;\r\n    }\r\n    return out;\r\n  }\r\n\r\n\r\n  getApiUrl() {\r\n    return this.apiUrl;\r\n  }\r\n\r\n  getDataPath() {\r\n    return this.dataPath;\r\n  }\r\n\r\n  getCollectionUrl() {\r\n    return this.getApiUrl() + '/' + this.getDataPath();\r\n  }\r\n  getDeleteResourceUrl(model: T) {\r\n    const me = this;\r\n    let modelId = (model as any)[me.modelIdProperty];\r\n    return me.getCollectionUrl() + '/' + modelId\r\n  }\r\n  getRequestUrl(): string {\r\n    const me = this,\r\n      queryParams = me.getRequestParams(),\r\n      url = me.router\r\n        .createUrlTree([me.getDataPath()], { queryParams })\r\n        .toString();\r\n    return me.getApiUrl() + url;\r\n  }\r\n\r\n  getRequestParams(): { [key: string]: number | string | boolean } {\r\n    return this.requestParams;\r\n  }\r\n\r\n  /**\r\n   * ACTION HANDLERS\r\n   */\r\n  addItemHandler() {\r\n    const me = this;\r\n    const dialogRef = me.matDialog.open(me.editorClass, {\r\n      data: me.getEditorData(),\r\n      position: { top: '50px' },\r\n      disableClose: true,\r\n    });\r\n    // Cuando el formulario se cierra.\r\n    dialogRef.afterClosed().subscribe((data) => {\r\n      me.afterCreateEditorClosed(data);\r\n    });\r\n  }\r\n\r\n  editItemHandler(rec: any) {\r\n    const me = this;\r\n    if (me.editionDisabled) {\r\n      return;\r\n    }\r\n    const dialogRef = me.matDialog.open(me.editorClass, {\r\n      data: me.getEditorData(rec),\r\n      disableClose: true,\r\n      position: { top: '50px' },\r\n    });\r\n    dialogRef.afterClosed().subscribe((data) => {\r\n      me.afterUpdateEditorClosed(data);\r\n    });\r\n  }\r\n\r\n  deleteItemHandler(model: any) {\r\n    const me = this;\r\n    me.dialogService\r\n      .confirmDelete(\r\n        me.getDeleteItemConfirmDialogTitle(model),\r\n        me.getDeleteItemConfirmDialogContent(model),\r\n        me.deleteItemConfirmButtonText,\r\n      )\r\n      .subscribe((ok) => {\r\n        if (ok) {\r\n          me.deleteResource(model);\r\n        }\r\n      });\r\n  }\r\n\r\n  deleteResource(model: T) {\r\n    const me = this;\r\n    me.http.delete(me.getDeleteResourceUrl(model), me.sendModelOnDelete ? { body: model } : undefined).subscribe(() => {\r\n      me.notifications.snackSuccess(me.getSuccessfullyDeletedItemNotificationContent(model));\r\n      me.removeRecord(model);\r\n    });\r\n  }\r\n\r\n  getEditorData(rec?: T): { [key: string]: any, model?: T } {\r\n    return {\r\n      model: rec,\r\n    };\r\n  }\r\n\r\n  updateRecord(rec: T) {\r\n    const me = this;\r\n    me.data = me.data?.map((item: any) =>\r\n      item[me.modelIdProperty] != (rec as any)[me.modelIdProperty] ? item : rec\r\n    );\r\n    me.updateView();\r\n  }\r\n\r\n  removeRecord(model: T) {\r\n    const me = this;\r\n    me.data = me.data?.filter((rec: T) => {\r\n      return rec != model;\r\n    });\r\n    me.totalRecords--;\r\n    me.updateView();\r\n  }\r\n\r\n\r\n  /**\r\n   * Este metodo puede ser sobre escrito para evitar el comportamiento por defecto.\r\n   */\r\n  afterCreateEditorClosed(model: T) {\r\n    const me = this;\r\n    if (model) {\r\n      //funcion creada para agregar datos a la matriz\r\n      me.data?.push(model);\r\n      me.updateView();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Este metodo puede ser sobre escrito para evitar el comportamiento por defecto.\r\n   */\r\n  afterUpdateEditorClosed(model: any) {\r\n    const me = this;\r\n    if (model) {\r\n      // Update record\r\n      me.updateRecord(model);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Nota: Sobrescribir este metodo para titulos personalizados.\r\n   */\r\n  getDeleteItemConfirmDialogTitle(model: any): string {\r\n    const me = this;\r\n    if (me.confirmDeleteTitle) return me.confirmDeleteTitle;\r\n    return StringUtils.compileTpl(\r\n      me.confirmDeleteTitleTpl,\r\n      // Capitalize string\r\n      { itemName: me.itemSingularName.charAt(0).toUpperCase() + me.itemSingularName.slice(1) }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Nota: Sobrescribir este metodo para mensajes personalizados\r\n   */\r\n  getDeleteItemConfirmDialogContent(model: T): string {\r\n    return StringUtils.compileTpl(\r\n      this.deleteItemConfirmDialogContentTpl,\r\n      this.getDeleteItemConfirmDialogTplData(model)\r\n    );\r\n  }\r\n\r\n  getDeleteItemConfirmDialogTplData(model: T): any {\r\n    const me = this;\r\n    let question = me.deleteItemQuestionText;\r\n    if (!question) {\r\n      question = StringUtils.compileTpl(\r\n        me.deleteItemQuestionTextTpl,\r\n        {\r\n          itemName: me.itemSingularName,\r\n          itemArticle: me.itemSingularArticle\r\n        }\r\n      );\r\n    }\r\n    return {\r\n      question,\r\n      itemName: this.getItemIdentificationName(model),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Nota: Sobrescribir este metodo para mensajes personalizados\r\n   */\r\n  getSuccessfullyDeletedItemNotificationContent(model: T): string {\r\n    return StringUtils.compileTpl(\r\n      this.successfullyDeletedItemNotificationTpl,\r\n      this.getSuccessfullyDeletedItemNotificationTplData(model)\r\n    );\r\n  }\r\n\r\n  getSuccessfullyDeletedItemNotificationTplData(model: T): any {\r\n    return {\r\n      itemName: this.getItemIdentificationName(model),\r\n    };\r\n  }\r\n\r\n  getItemIdentificationName(model: T): string {\r\n    return (model as any)[this.modelNameProperty] || '';\r\n  }\r\n\r\n  reloadHandler() {\r\n    this.loadData();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const me = this;\r\n    me._subscribeLoadEvent();\r\n    me.subscribeRouteParams();\r\n    me.loadDatasets();\r\n    me._createSelectionModel();\r\n    if (me.autoload) {\r\n      me.loadData();\r\n    }\r\n  }\r\n  subscribeRouteParams() { }\r\n  loadDatasets() { }\r\n  _createSelectionModel() {\r\n    const me = this;\r\n    me.selection = new SelectionModel<T>(me.selectionMultiple, []);\r\n    me.selection.changed.subscribe((selection) => {\r\n      me.selectionChange.emit(selection.source.selected);\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    const me = this;\r\n    if (me.sort) {\r\n      me.sort.sortChange.subscribe(() => {\r\n        if (me.paginator) {\r\n          me.paginator.pageIndex = 0;\r\n        }\r\n        me.loadData();\r\n      });\r\n    }\r\n    if (me.paginator) {\r\n      me.paginator.page.subscribe(() => {\r\n        me.loadData();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Solo notificar√° los errores de servidor componentes tipo component\r\n   */\r\n  handleServerError(xhr: any) {\r\n    const me = this;\r\n    this.errorStatus = xhr.status;\r\n    if (me.type == COMPONENT_TYPE.COMPONENT) {\r\n      me.notifications.handleXhrError(xhr);\r\n    }\r\n  }\r\n\r\n  //*** actualizar las celdas */\r\n  updateView() {\r\n    if (this.table) {\r\n      this.table.renderRows();\r\n    }\r\n  }\r\n\r\n  applyFilters(filters: QueryFilter[]) {\r\n    const me = this;\r\n    me.filters = filters;\r\n    me.resetPageIndex();\r\n    me.loadData();\r\n  }\r\n\r\n  resetPageIndex() {\r\n    const me = this;\r\n    if (me.paginator) me.paginator.pageIndex = 0;\r\n  }\r\n\r\n  getFilters(): QueryFilter[] {\r\n    return this.filters;\r\n  }\r\n\r\n  applySearchFilter(filter: QueryFilter) {\r\n    const me = this;\r\n    me.searchFilter = filter;\r\n    if (me.paginator) me.paginator.pageIndex = 0;\r\n    me.loadData();\r\n  }\r\n\r\n  applyLocalSearchFilter(filter: QueryFilter) {\r\n    const me = this;\r\n    me.localSearchFilter = filter;\r\n    me.filterData(filter.value);\r\n  }\r\n  /**\r\n   * Determina si se deber√≠a o no mostrar el mensaje de cargando\r\n   */\r\n  shouldShowProgressView() {\r\n    const me = this;\r\n    return me._isLoadingData && !me.data;\r\n  }\r\n\r\n  shouldShowErrorView() {\r\n    const me = this;\r\n    return me._didLoadDataFailed && !me._isLoadingData;\r\n  }\r\n\r\n  // FIX\r\n  shouldShowTitleBar() {\r\n    const me = this;\r\n    return !me._didLoadDataFailed && !me._isLoadingData;\r\n  }\r\n\r\n  shouldShowContent() {\r\n    const me = this;\r\n    return !me._didLoadDataFailed && !me._isLoadingData;\r\n  }\r\n\r\n  /** Whether the number of selected elements matches the total number of rows. */\r\n  isAllSelected() {\r\n    const numSelected = this.getSelection().length;\r\n    const numRows = this.data?.length;\r\n    return numSelected === numRows;\r\n  }\r\n\r\n  /** Selects all rows if they are not all selected; otherwise clear selection. */\r\n  masterToggle() {\r\n    this.isAllSelected()\r\n      ? this.selection.clear()\r\n      : this.data?.forEach((row: any) => this.selection.select(row));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this._loadSubcription) {\r\n      this._loadSubcription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  // Updates a specific field and makes the http request if it's necessary\r\n  updateValue(model: any, fieldName: string, newValue: string | number | boolean) {\r\n    const me = this;\r\n    // No requiere actualizar\r\n    if (model[fieldName] == newValue) {\r\n      return;\r\n    }\r\n    const oldValue = model[fieldName];\r\n    model[fieldName] = newValue;\r\n    me.http\r\n      .put(me.getCollectionUrl() + '/' + model[me.modelIdProperty], model)\r\n      .subscribe(\r\n        (_) => {\r\n          me.afterValueUpdated(model, fieldName, newValue, oldValue);\r\n        },\r\n        (xhr) => {\r\n          // Reset on error\r\n          model[fieldName] = oldValue;\r\n          me.notifications.handleXhrError(xhr);\r\n        }\r\n      );\r\n  }\r\n\r\n  afterValueUpdated(model: T, fieldName: string, newValue: any, oldValue: any) {\r\n\r\n  }\r\n\r\n  navigateToItemView(id: number) {\r\n    this.router.navigate(['./', id], { relativeTo: this.route });\r\n  }\r\n\r\n  getBaseHref(): string {\r\n    return document.baseURI;\r\n  }\r\n\r\n  getPageIndex() {\r\n    return this.paginator ? this.paginator.pageIndex : this.pageIndex;\r\n  }\r\n\r\n  getPageSize() {\r\n    return this.paginator ? this.paginator.pageSize : this.pageSize;\r\n  }\r\n\r\n  getItemNumber(index: number): number {\r\n    return this.getPageIndex() * this.getPageSize() + index + 1;\r\n  }\r\n\r\n  /**\r\n   * Filtra por todas las columnas\r\n   * @param text Texto buscado\r\n   */\r\n  filterData(text: string) {\r\n    const me = this;\r\n    text = (text || '').toString().trimStart().toLowerCase();\r\n    me.data = me._rawTransformedData.filter((item: any) => {\r\n      return Object.keys(item).some(key => {\r\n        const value = (item[key] || '').toString().toLowerCase();\r\n        return value.includes(text.toLowerCase());\r\n      })\r\n    });\r\n  }\r\n\r\n  getErrorStatus(): number {\r\n    return this.errorStatus;\r\n  }\r\n\r\n}\r\n",
            "providers": [],
            "hostDirectives": [],
            "standalone": false,
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "selectionChange",
                    "defaultValue": "new EventEmitter<any[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:keyup",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 131
                }
            ],
            "propertiesClass": [
                {
                    "name": "_didLoadDataFailed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "_isLoadingData",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "_loadSubcription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": true,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "_rawData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "_rawTransformedData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "$fields",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 105
                },
                {
                    "name": "apiUrl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "autoload",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "clearDataOnFail",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "confirmDeleteTitle",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "confirmDeleteTitleTpl",
                    "defaultValue": "'Eliminar {itemName}'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "dataPath",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "deleteItemConfirmButtonText",
                    "defaultValue": "'ELIMINAR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "deleteItemConfirmDialogContentTpl",
                    "defaultValue": "'{question}<div class=\"mt-2\"><strong style=\"text-transform: capitalize;\">{itemName}</strong></div>'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "deleteItemQuestionText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "deleteItemQuestionTextTpl",
                    "defaultValue": "'¬øSeguro que desea eliminar {itemArticle} {itemName}?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "dialogService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogService",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "editionDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "editorClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "errorStatus",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "errorView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DataErrorViewComponent",
                    "optional": true,
                    "description": "",
                    "line": 103,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DataErrorViewComponent"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "http",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpClient",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "httpGetList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpCollectionService",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "itemPluralName",
                    "defaultValue": "'√≠tems'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "itemSingularArticle",
                    "defaultValue": "'el'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "itemSingularName",
                    "defaultValue": "'√≠tem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "load",
                    "defaultValue": "this.loadObs.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadObs",
                    "defaultValue": "new Subject()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "localSearchFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryFilter",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "matDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 93,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "modelIdProperty",
                    "defaultValue": "'id'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "modelNameProperty",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationsService",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "pageIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "pageSize",
                    "defaultValue": "25",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": true,
                    "description": "",
                    "line": 102,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "requestParams",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "searchFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryFilter",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "selectedRow",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "selectedRowIndex",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "selection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectionModel<any>",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "selectionMultiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "sendModelOnDelete",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": true,
                    "description": "",
                    "line": 101,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "successfullyDeletedItemNotificationTpl",
                    "defaultValue": "'{itemName} eliminado correctamente'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": true,
                    "description": "",
                    "line": 100,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable"
                        }
                    ],
                    "modifierKind": [
                        167
                    ]
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "type",
                    "defaultValue": "'page'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Tipo de componente</p>\n<ul>\n<li>page: Si el componente que extiende est√° asociado con una ruta.</li>\n<li>component: Si el componente extendido esta dentro de otro componente</li>\n</ul>\n",
                    "line": 50,
                    "rawdescription": "\n\nTipo de componente\n - page: Si el componente que extiende est√° asociado con una ruta.\n - component: Si el componente extendido esta dentro de otro componente\n\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_createSelectionModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 553,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "_subscribeLoadEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addItemHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 378,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nACTION HANDLERS\n",
                    "description": "<p>ACTION HANDLERS</p>\n"
                },
                {
                    "name": "afterCreateEditorClosed",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 456,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEste metodo puede ser sobre escrito para evitar el comportamiento por defecto.\n",
                    "description": "<p>Este metodo puede ser sobre escrito para evitar el comportamiento por defecto.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "afterUpdateEditorClosed",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 468,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEste metodo puede ser sobre escrito para evitar el comportamiento por defecto.\n",
                    "description": "<p>Este metodo puede ser sobre escrito para evitar el comportamiento por defecto.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "afterValueUpdated",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "oldValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 691,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "oldValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyFilters",
                    "args": [
                        {
                            "name": "filters",
                            "type": "QueryFilter[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 596,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "QueryFilter[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyLocalSearchFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "QueryFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 619,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "QueryFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applySearchFilter",
                    "args": [
                        {
                            "name": "filter",
                            "type": "QueryFilter",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 612,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "QueryFilter",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "beforeLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHook\nEs llamado antes de solicitar datos al servidor\n",
                    "description": "<p>Hook\nEs llamado antes de solicitar datos al servidor</p>\n"
                },
                {
                    "name": "deleteItemHandler",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteResource",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 421,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editItemHandler",
                    "args": [
                        {
                            "name": "rec",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 391,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rec",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterData",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 719,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nFiltra por todas las columnas\n",
                    "description": "<p>Filtra por todas las columnas</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 19714,
                                "end": 19718,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "text"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19708,
                                "end": 19713,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Texto buscado</p>\n"
                        }
                    ]
                },
                {
                    "name": "getApiUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBaseHref",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 699,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getBaseRequestParams",
                    "args": [],
                    "optional": false,
                    "returnType": "CollectionQueryParams",
                    "typeParameters": [],
                    "line": 311,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCollectionUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 354,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataPath",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 350,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDeleteItemConfirmDialogContent",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 492,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNota: Sobrescribir este metodo para mensajes personalizados\n",
                    "description": "<p>Nota: Sobrescribir este metodo para mensajes personalizados</p>\n",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeleteItemConfirmDialogTitle",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 479,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNota: Sobrescribir este metodo para titulos personalizados.\n",
                    "description": "<p>Nota: Sobrescribir este metodo para titulos personalizados.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeleteItemConfirmDialogTplData",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 499,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDeleteResourceUrl",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEditorData",
                    "args": [
                        {
                            "name": "rec",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 429,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rec",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 730,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "QueryFilter[]",
                    "typeParameters": [],
                    "line": 608,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getItemIdentificationName",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 533,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItemNumber",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 711,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 703,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageSize",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 707,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRecordByIndex",
                    "args": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "idx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRecordIndex",
                    "args": [
                        {
                            "name": "rec",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rec",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRequestParams",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 371,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRequestUrl",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 362,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelection",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSuccessfullyDeletedItemNotificationContent",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 520,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nNota: Sobrescribir este metodo para mensajes personalizados\n",
                    "description": "<p>Nota: Sobrescribir este metodo para mensajes personalizados</p>\n",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSuccessfullyDeletedItemNotificationTplData",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 527,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleServerError",
                    "args": [
                        {
                            "name": "xhr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 581,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSolo notificar√° los errores de servidor componentes tipo component\n",
                    "description": "<p>Solo notificar√° los errores de servidor componentes tipo component</p>\n",
                    "jsdoctags": [
                        {
                            "name": "xhr",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isAllSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 649,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhether the number of selected elements matches the total number of rows.",
                    "description": "<p>Whether the number of selected elements matches the total number of rows.</p>\n"
                },
                {
                    "name": "keyEvent",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:keyup', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        167
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadDatasets",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 552,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "masterToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 656,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nSelects all rows if they are not all selected; otherwise clear selection.",
                    "description": "<p>Selects all rows if they are not all selected; otherwise clear selection.</p>\n"
                },
                {
                    "name": "navigateToItemView",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 695,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 561,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 662,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 541,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDataServiceResponse",
                    "args": [
                        {
                            "name": "res",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "res",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "recordExists",
                    "args": [
                        {
                            "name": "rec",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rec",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "reloadHandler",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeRecord",
                    "args": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 443,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPageIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 603,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNext",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectPrevious",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldShowContent",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 643,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldShowErrorView",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 632,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "shouldShowProgressView",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 627,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDetermina si se deber√≠a o no mostrar el mensaje de cargando\n",
                    "description": "<p>Determina si se deber√≠a o no mostrar el mensaje de cargando</p>\n"
                },
                {
                    "name": "shouldShowTitleBar",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 638,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeRouteParams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 551,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformServiceResponseData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRecord",
                    "args": [
                        {
                            "name": "rec",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 435,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rec",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateValue",
                    "args": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newValue",
                            "type": "string | number | boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 669,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "model",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newValue",
                            "type": "string | number | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 590,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "validIndex",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 307,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 117,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppHeaderComponent",
            "id": "component-AppHeaderComponent-e0617a13a3b47c4327c29eaca046834ea60964b902d22afd67da04a9845d12142578ecaa64d055ee891632192d50a5ce8512b930eba8f7a45b6c2b70496b8b5e",
            "file": "projects/ngx-kit-business/components/src/app-header/app-header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-app-header",
            "styleUrls": [
                "./app-header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "32",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "logoutText",
                    "defaultValue": "'Logout'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "roleName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "logoutButtonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter"
                },
                {
                    "name": "menuButtonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'ngbiz-app-header',\n  templateUrl: './app-header.component.html',\n  styleUrls: ['./app-header.component.scss'],\n})\nexport class AppHeaderComponent {\n  @Output() menuButtonClick = new EventEmitter();\n  @Output() logoutButtonClick = new EventEmitter();\n  @Input() appName: string = '';\n  @Input() userName: string = '';\n  @Input() roleName: string = '';\n  @Input() logoutText: string = 'Logout';\n  @Input() @HostBinding('style.height.px') height: number = 32;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n}\r\n.menu-button {\r\n  margin-right: 4px;\r\n  min-width: unset;\r\n  border-radius: 0;\r\n  height: 100%;\r\n  mat-icon {\r\n    font-size: 26px;\r\n    height: 26px;\r\n    width: 26px;\r\n    margin: 0;\r\n  }\r\n}\r\nmat-toolbar {\r\n  height: 100%;\r\n  font-size: 13px;\r\n  padding: 0 7px;\r\n}\r\n.fill {\r\n  flex: 1;\r\n}\r\n\r\n.block-user-idenfication {\r\n  display: flex;\r\n  padding: 0 16px;\r\n  text-transform: uppercase;\r\n  text-align: left;\r\n  overflow: hidden;\r\n  .names-wrapper {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin-left: 4px;\r\n    overflow: hidden;\r\n    > div {\r\n      line-height: 1.2;\r\n      font-size: 10px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n    }\r\n  }\r\n}\r\n.exit-button {\r\n  font-size: 12px;\r\n  mat-icon {\r\n    font-size: 19px;\r\n    height: 20px;\r\n    width: 20px;\r\n  }\r\n}\r\n.separator {\r\n  border-left: 1px solid #fff;\r\n  width: 1px;\r\n  height: 22px;\r\n}\r\n",
                    "styleUrl": "./app-header.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-toolbar role=\"heading\" color=\"primary\">\r\n  <button mat-button class=\"menu-button\" (click)=\"menuButtonClick.emit()\">\r\n    <mat-icon>menu</mat-icon>\r\n  </button>\r\n  <span>{{appName}}</span>\r\n  <span class=\"fill\"></span>\r\n  <div class=\"block-user-idenfication\">\r\n    <mat-icon>account_circle</mat-icon>\r\n    <div class=\"names-wrapper\">\r\n      <div>{{userName}}</div>\r\n      <div>{{roleName}}</div>\r\n    </div>\r\n  </div>\r\n  <!-- Separator-->\r\n  <span class=\"separator\"></span>\r\n  <div class=\"block md:hidden\">\r\n    <button mat-icon-button (click)=\"logoutButtonClick.emit()\">\r\n      <mat-icon>exit_to_app</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"hidden md:block\">\r\n    <button mat-button (click)=\"logoutButtonClick.emit()\">\r\n      <span>{{logoutText}}</span>\r\n    </button>\r\n  </div>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0",
            "file": "projects/ngx-kit-business/src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 786,
                            "end": 799,
                            "flags": 8421376,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 787,
                                "end": 795,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 34,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 48,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  imports: [CommonModule],\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 50
                    }
                }
            }
        },
        {
            "name": "DataErrorViewComponent",
            "id": "component-DataErrorViewComponent-135daaa9ca70ba4ea06fb7fc4204cc26e9139bcd71f58a01f06a355e1c5f3b4f97f77c230497c7cc1791a9bdb3b62aede0ebe4166a2c77e72bd9b1c94fafa051",
            "file": "projects/ngx-kit-business/components/src/data-error-view/data-error-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-data-error-view",
            "styleUrls": [
                "./data-error-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-error-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonIcon",
                    "defaultValue": "'app:refresh'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonText",
                    "defaultValue": "'Intentar nuevamente'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "errorIcon",
                    "defaultValue": "'app:ha-cloud-error'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showActionButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "actionClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultErrorMessage",
                    "defaultValue": "'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nconst HTTP_STATUS_MESSAGES: { [key: number]: string } = {\n  0: 'No se logr√≥ establecer conexi√≥n con el servidor',\n  400: 'El servidor no pudo procesar la petici√≥n',\n  401: 'Inicio de sesi√≥n requerido.',\n  403: 'Ud. No cuenta con los permisos necesarios para realizar acceder a est√° funcionalidad.',\n  404: 'Es servicio solicitado no existe.',\n  500: 'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.',\n  502: 'No se recibio respuesta de servicio externo.',\n  503: 'Este servicio se encuentra temporalmente deshabilitado.'\n}\n@Component({\n  selector: 'ngbiz-data-error-view',\n  templateUrl: './data-error-view.component.html',\n  styleUrls: ['./data-error-view.component.scss'],\n  host: { class: 'container-center info-view danger' },\n})\nexport class DataErrorViewComponent {\n  defaultErrorMessage: string = 'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.';\n  message!: string;\n  @Input() errorIcon: string = 'app:ha-cloud-error';\n  @Input() buttonIcon: string = 'app:refresh';\n  @Input() buttonText: string = 'Intentar nuevamente';\n  @Input() status!: number;\n  @Input() showActionButton: boolean = true;\n  @Output() actionClick = new EventEmitter();\n  ngOnInit(): void {\n    const me = this;\n    me.message = HTTP_STATUS_MESSAGES[me.status] || me.defaultErrorMessage;\n    // Autenticacion requerida\n    if (me.status === 401) {\n      me.showActionButton = false;\n      return;\n    }\n    // Acceso prohibido\n    if (me.status === 403) {\n      me.showActionButton = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  z-index: 200;\r\n  background-color: #fafafa;\r\n}\r\n.cmp-wrapper {\r\n  text-align: center;\r\n}\r\n.icon {\r\n  color: #f44336;\r\n  width: 64px;\r\n  height: 64px;\r\n}\r\n.messaje {\r\n  display: inline-block;\r\n  max-width: 320px;\r\n  margin-top: 24px;\r\n}\r\n.action-container {\r\n  margin-top: 48px;\r\n}\r\n",
                    "styleUrl": "./data-error-view.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"cmp-wrapper\">\n  <div>\n    <mat-icon class=\"icon\" [svgIcon]=\"errorIcon\"></mat-icon>\n  </div>\n  <div class=\"messaje\">{{message}}</div>\n  <div *ngIf=\"showActionButton\" class=\"action-container\">\n    <button color=\"primary\" mat-stroked-button (click)=\"actionClick.emit()\">\n      <mat-icon *ngIf=\"buttonIcon\" class=\"action-icon\" [svgIcon]=\"buttonIcon\"></mat-icon>\n      <span>{{buttonText}}</span>\n    </button>\n  </div>\n</div>\n"
        },
        {
            "name": "DialogComponent",
            "id": "component-DialogComponent-fb7067c02040f59d45edebe01d84ac75812faadb43b175c82b5151bc4ffa9be2b5e4c6c5b60abc0c1d5f630a85bfdec7a35ef4ff78d2774813ab60096b064d85",
            "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actionButtonColor",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "actionButtonType",
                    "defaultValue": "ButtonType.RAISED",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "actionText",
                    "defaultValue": "'ACEPTAR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "buttonsType",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "cancelButtonColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "cancelButtonType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "cancelText",
                    "defaultValue": "'CANCELAR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<DialogComponent>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "maxWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "noText",
                    "defaultValue": "'NO'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DialogOption[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "safeMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SafeHtml",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "sanitizer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DomSanitizer",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "suggested",
                    "defaultValue": "'none'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"confirm\" | \"cancel\" | \"yes\" | \"no\" | \"none\"",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "title",
                    "defaultValue": "'Confirmar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "yesText",
                    "defaultValue": "'S√ç'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "getYesNotButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOptionClick",
                    "args": [
                        {
                            "name": "option",
                            "type": "DialogOption",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "option",
                            "type": "DialogOption",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDefaultButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setPropsFromData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\r\nexport enum ButtonType {\r\n  RAISED = 'raised',\r\n  STROKED = 'stroked',\r\n  NORMAL = 'normal',\r\n}\r\ntype buttonsType = 'yes_not' | 'confirm_cancel' | 'cancel_confirm' | 'ok';\r\nexport interface DialogOption {\r\n  text: string;\r\n  buttonType?: ButtonType;\r\n  buttonColor?: string;\r\n  option?: boolean | number | string;\r\n  closeButton?: boolean;\r\n  suggested?: boolean;\r\n}\r\nexport interface DialogDataOptions {\r\n  title?: string;\r\n  message: string;\r\n  actionText?: string;\r\n  actionButtonColor?: string;\r\n  actionButtonType?: ButtonType;\r\n  cancelButtonColor?: string;\r\n  cancelButtonType?: ButtonType;\r\n  cancelText?: string;\r\n  buttonColor?: string;\r\n  maxWidth?: number;\r\n  options?: DialogOption[];\r\n  suggested?: 'confirm' | 'cancel' | 'yes' | 'no' | 'none';\r\n  buttons?: buttonsType;\r\n}\r\n@Component({\r\n  selector: 'app-dialog',\r\n  templateUrl: './dialog.component.html',\r\n  styleUrls: ['./dialog.component.scss'],\r\n})\r\nexport class DialogComponent implements OnInit {\r\n\r\n  title: string = 'Confirmar';\r\n  message = '';\r\n  safeMessage: SafeHtml = '';\r\n  actionText = 'ACEPTAR';\r\n  yesText = 'S√ç';\r\n  noText = 'NO';\r\n  actionButtonColor = 'primary';\r\n  actionButtonType: ButtonType = ButtonType.RAISED;\r\n  cancelText = 'CANCELAR';\r\n  cancelButtonColor!: string;\r\n  cancelButtonType!: ButtonType;\r\n  maxWidth!: number;\r\n  options: DialogOption[] = [];\r\n  suggested: 'confirm' | 'cancel' | 'yes' | 'no' | 'none' = 'none';\r\n  buttons!: buttonsType;\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private inputData: DialogDataOptions,\r\n    public sanitizer: DomSanitizer\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.setPropsFromData();\r\n  }\r\n\r\n  setPropsFromData() {\r\n    const me = this;\r\n    Object.assign(me, me.inputData);\r\n    me.safeMessage = me.sanitizer.bypassSecurityTrustHtml(me.message);\r\n    if (!me.options.length) {\r\n      me.setDefaultButtons();\r\n    }\r\n  }\r\n\r\n  setDefaultButtons() {\r\n    const me = this;\r\n    // Buttons YES/NOT\r\n    if (me.buttons == 'yes_not') {\r\n      me.options = me.getYesNotButtons();\r\n      return;\r\n    }\r\n    if (me.buttons == 'confirm_cancel' || me.buttons == 'cancel_confirm') {\r\n      me.options = [\r\n        {\r\n          text: me.actionText,\r\n          buttonColor: me.actionButtonColor ? me.actionButtonColor : 'primary',\r\n          buttonType: ButtonType.RAISED,\r\n          option: true,\r\n          suggested: me.suggested == 'confirm',\r\n        },\r\n        {\r\n          text: me.cancelText,\r\n          buttonType: ButtonType.NORMAL,\r\n          option: false,\r\n          suggested: me.suggested == 'cancel',\r\n        },\r\n      ];\r\n      if (me.buttons == 'cancel_confirm') {\r\n        me.options.reverse();\r\n      }\r\n      return;\r\n    }\r\n    if (me.buttons == 'ok') {\r\n      me.options = [\r\n        {\r\n          text: me.actionText,\r\n          buttonColor: me.actionButtonColor ? me.actionButtonColor : 'primary',\r\n          buttonType: ButtonType.RAISED,\r\n          option: true,\r\n        },\r\n      ];\r\n    }\r\n  }\r\n\r\n  getYesNotButtons() {\r\n    const me = this;\r\n    return [\r\n      {\r\n        text: me.yesText,\r\n        buttonColor: 'primary',\r\n        buttonType:\r\n          me.suggested == 'yes' ? ButtonType.RAISED : ButtonType.STROKED,\r\n        option: true,\r\n      },\r\n      {\r\n        text: me.noText,\r\n        buttonColor: me.suggested == 'no' ? 'primary' : 'warn',\r\n        buttonType:\r\n          me.suggested == 'no' ? ButtonType.RAISED : ButtonType.STROKED,\r\n        option: false,\r\n      },\r\n    ];\r\n  }\r\n\r\n  onOptionClick(option: DialogOption) {\r\n    const me = this;\r\n    me.dialogRef.close(option.option);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inputData",
                        "type": "DialogDataOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<DialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputData",
                        "type": "DialogDataOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 mat-dialog-title>{{title}}</h2>\r\n<div mat-dialog-content [innerHTML]=\"safeMessage\" [ngStyle]=\"{'max-width': maxWidth?maxWidth + 'px':null}\"></div>\r\n<mat-dialog-actions align=\"end\" class=\"text-right\">\r\n  <ng-container *ngFor=\"let option of options\">\r\n    <button *ngIf=\"!option.buttonType\" (click)=\"onOptionClick(option)\" mat-button\r\n      [color]=\"option.buttonColor\">{{option.text}}</button>\r\n    <button *ngIf=\"option.buttonType == 'normal'\" (click)=\"onOptionClick(option)\" mat-button\r\n      [color]=\"option.buttonColor\">{{option.text}}</button>\r\n    <button *ngIf=\"option.buttonType == 'raised'\" (click)=\"onOptionClick(option)\" mat-raised-button\r\n      [color]=\"option.buttonColor\">{{option.text}}</button>\r\n    <button *ngIf=\"option.buttonType == 'stroked'\" (click)=\"onOptionClick(option)\" mat-stroked-button\r\n      [color]=\"option.buttonColor\">{{option.text}}</button>\r\n  </ng-container>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "EditionPinComponent",
            "id": "component-EditionPinComponent-24c0b1b0980c95f970c0297ea6893bad36225639c39809bf281ba8cc7750e34b86222218eb8aa3333646906cde88dd3adb6e2791482db3e2f204879f119b0721",
            "file": "projects/ngx-kit-business/components/src/edition-pin/edition-pin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-edition-pin",
            "styleUrls": [
                "./edition-pin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./edition-pin.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n@Component({\r\n  selector: 'ngbiz-edition-pin',\r\n  templateUrl: './edition-pin.component.html',\r\n  styleUrls: ['./edition-pin.component.scss'],\r\n})\r\nexport class EditionPinComponent {\r\n  @Input() icon!: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../scss/vars\";\r\nmat-icon {\r\n  box-sizing: border-box;\r\n  background-color: var(--ngbiz-primary-color, $ngbiz-primary-color);\r\n  color: white;\r\n  border-radius: 50%;\r\n  padding: 4px;\r\n  vertical-align: middle;\r\n  width: 28px;\r\n  height: 28px;\r\n  line-height: 1;\r\n  font-size: 20px;\r\n}\r\n",
                    "styleUrl": "./edition-pin.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-icon>{{icon}}</mat-icon>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-3d494fd89671305c6be07de00e019efdf08f2e36c2169e5fb75a5acdb2841da927e3ef3cbd21cc18f478373a784b1fb90e8b63b9df4b3498a75b652bd9c37b38",
            "file": "projects/ngx-kit-business/src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HttpActivityBarComponent",
            "id": "component-HttpActivityBarComponent-ec82a0befe9be37ecc4d882387bb5bccf3c7e655c2cfd5bb14904b8769619810bbcbd5004dd9180834730a82c77492810266d7d7be4b0d99c9a19361819c271d",
            "file": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-http-activity-bar",
            "styleUrls": [
                "./http-activity-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./http-activity-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "zIndex",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\r\nimport { HttpActivityService } from './http-activity.service';\r\n\r\n@Component({\r\n  selector: 'ngbiz-http-activity-bar',\r\n  templateUrl: './http-activity-bar.component.html',\r\n  styleUrls: ['./http-activity-bar.component.scss'],\r\n})\r\nexport class HttpActivityBarComponent implements OnInit {\r\n  @HostBinding('style.z-index')\r\n  @Input() zIndex: number = 1;\r\n  active: boolean = false;\r\n  constructor(private service: HttpActivityService) { }\r\n\r\n  ngOnInit(): void {\r\n    const me = this;\r\n    me.service.statusChange.subscribe((active) => {\r\n      setTimeout(() => {\r\n        me.active = active;\r\n      }, 0);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../scss/vars\";\r\n:host {\r\n  display: block;\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 2px;\r\n  top: 0;\r\n}\r\nmat-progress-bar {\r\n  height: 100%;\r\n  overflow-y: hidden;\r\n  background-color: lighten($ngbiz-primary-color, 75);\r\n}\r\n",
                    "styleUrl": "./http-activity-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "service",
                        "type": "HttpActivityService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "service",
                        "type": "HttpActivityService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-progress-bar *ngIf=\"active\" mode=\"indeterminate\"></mat-progress-bar>\r\n"
        },
        {
            "name": "ListToolbarComponent",
            "id": "component-ListToolbarComponent-8a93bafcfeca1390a55a92a41e2e11bc7d29f1dc33896688495334ac30b93e130a4576dcdbfb21ab754af6ea34d992a981747126df310d2d7b528aef0b7a92ef",
            "file": "projects/ngx-kit-business/components/src/list-toolbar/list-toolbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-list-toolbar",
            "styleUrls": [
                "./list-toolbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./list-toolbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "searchDebounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "filtersChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "EventEmitter<CollectionFilter[]>",
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "searchFilterChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<CollectionFilter>",
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "searchFilter",
                    "defaultValue": "{ id: '_query', type: 'string', field: '_query', operator: '~' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionFilter",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        161
                    ],
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "filters",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CollectionFilter[]",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "activeFilter",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "addOrRemoveListFilterItemValue",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "itemValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "add",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "itemValue",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "add",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "fireEvent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "getActiveFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRetorna solo los filtros activos\n",
                    "description": "<p>Retorna solo los filtros activos</p>\n",
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "getFilter",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "CollectionFilter | null",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "setFilterValue",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "operator",
                            "type": "ComparisonOperator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "operator",
                            "type": "ComparisonOperator",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                },
                {
                    "name": "setSearchFilterValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "FiltersContainerComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FiltersContainerComponent } from '../filters-container.component';\nimport { CollectionFilter } from 'ngx-kit-business/types';\n\n@Component({\n  selector: 'ngbiz-list-toolbar',\n  templateUrl: './list-toolbar.component.html',\n  styleUrls: ['./list-toolbar.component.scss'],\n})\nexport class ListToolbarComponent extends FiltersContainerComponent {\n  @Input() searchDebounceTime = 500;\n  override searchFilter: CollectionFilter = { id: '_query', type: 'string', field: '_query', operator: '~' };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  padding: 0.25rem 16px;\r\n  min-height: 44px;\r\n  align-items:center;\r\n}\r\napp-text-filter {\r\n  width: 100%;\r\n  max-width: 320px;\r\n}\r\n",
                    "styleUrl": "./list-toolbar.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "FiltersContainerComponent",
            "templateData": "<ng-content select=\"[start]\"></ng-content>\n<ngbiz-text-filter (valueChange)=\"setSearchFilterValue($event)\" [debounceTime]=\"searchDebounceTime\"></ngbiz-text-filter>\n<ng-content select=\"[afterSearchBox]\"></ng-content>\n<ng-content select=\"[end]\"></ng-content>\n"
        },
        {
            "name": "NavListComponent",
            "id": "component-NavListComponent-c3a4c2466d2b550d2e86bc914d9185553b7b159140679fe55bac2dfafa6c7953ae0a7954e237e275ac7706fbf9cddb19530b857190dddf3255c48664196e79b1",
            "file": "projects/ngx-kit-business/components/src/nav-list/nav-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-nav-list",
            "styleUrls": [
                "./nav-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./nav-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "NavItemModel[]",
                    "decorators": []
                },
                {
                    "name": "sidenav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "MatSidenav",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onItemClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { MatSidenav } from '@angular/material/sidenav';\r\nimport { NavItemModel } from './nav-item.model';\r\n@Component({\r\n  selector: 'ngbiz-nav-list',\r\n  templateUrl: './nav-list.component.html',\r\n  styleUrls: ['./nav-list.component.scss'],\r\n})\r\nexport class NavListComponent {\r\n  @Input()\r\n  sidenav!: MatSidenav;\r\n  @Input()\r\n  items: NavItemModel[] = [];\r\n  onItemClick() {\r\n    if (this.sidenav?.mode === 'over') {\r\n      this.sidenav.close();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../scss/vars\";\r\n$levelSpacing: 22px;\r\n$selectionBorderWidth: 4px;\r\n$itemHorizontalPadding: 16px;\r\n$itemFontSize: 14px;\r\na {\r\n  cursor: pointer;\r\n  padding: 0 $itemHorizontalPadding;\r\n  font-size: $itemFontSize;\r\n}\r\nmat-nav-list {\r\n  padding-top: 0;\r\n  width: 100%;\r\n  .mat-mdc-list-item {\r\n    height: $ngbiz-nav-item-height;\r\n    font-size: 14px;\r\n  }\r\n}\r\nmat-icon {\r\n  width: 18px;\r\n  height: 18px;\r\n  font-size: 18px;\r\n  margin-right: 4px;\r\n  line-height: 18px !important;\r\n  color: #616161;\r\n}\r\na.active {\r\n  border-left: $selectionBorderWidth solid\r\n    var(--ngbiz-primary-color, $ngbiz-primary-color);\r\n\r\n  mat-icon {\r\n    color: var(--ngbiz-primary-color, $ngbiz-primary-color);\r\n  }\r\n  .menu-item {\r\n    margin-left: -$selectionBorderWidth;\r\n    &.l2 {\r\n      margin-left: $levelSpacing - $selectionBorderWidth;\r\n    }\r\n    &.l3 {\r\n      margin-left: $levelSpacing * 2 - $selectionBorderWidth;\r\n    }\r\n    &.l4 {\r\n      margin-left: $levelSpacing * 3 - $selectionBorderWidth;\r\n    }\r\n  }\r\n}\r\n\r\n.menu-item {\r\n  display: flex;\r\n  align-items: center;\r\n  > * {\r\n    line-height: 20px;\r\n  }\r\n  &.l2 {\r\n    margin-left: $levelSpacing;\r\n  }\r\n  &.l3 {\r\n    margin-left: $levelSpacing * 2;\r\n  }\r\n  &.l4 {\r\n    margin-left: $levelSpacing * 3;\r\n  }\r\n}\r\nmat-expansion-panel {\r\n  border-radius: 0;\r\n}\r\nmat-expansion-panel-header {\r\n  padding: 0 $itemHorizontalPadding;\r\n  height: $ngbiz-nav-item-height !important;\r\n  font-size: $itemFontSize;\r\n  &.l2 {\r\n    padding-left: $itemHorizontalPadding + $levelSpacing;\r\n  }\r\n  &.l3 {\r\n    padding-left: $itemHorizontalPadding + $levelSpacing * 2;\r\n  }\r\n  &.l4 {\r\n    padding-left: $itemHorizontalPadding + $levelSpacing * 3;\r\n  }\r\n  &.mat-expanded {\r\n    height: $ngbiz-nav-item-height;\r\n  }\r\n}\r\n",
                    "styleUrl": "./nav-list.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<mat-nav-list>\r\n  <ng-container *ngFor=\"let item of items\">\r\n    <ng-container *ngTemplateOutlet=\"navItem;\r\n    context: {item:item, level: 1}\">\r\n    </ng-container>\r\n  </ng-container>\r\n</mat-nav-list>\r\n<ng-template #navItem let-item=\"item\" let-level=\"level\">\r\n  <a *ngIf=\"!item.children?.length\" mat-list-item [routerLink]=\"item.route\" routerLinkActive=\"active\"\r\n    (click)=\"onItemClick()\">\r\n    <div [class]=\"'menu-item l'+level\">\r\n      <mat-icon>{{item.icon}}</mat-icon><span>{{item.text}}</span>\r\n    </div>\r\n  </a>\r\n  <mat-expansion-panel *ngIf=\"item.children?.length\" class=\"mat-elevation-z0\">\r\n    <mat-expansion-panel-header [class]=\"'l'+level\">\r\n      <mat-panel-title>\r\n        <mat-icon>{{item.icon}}</mat-icon><span>{{item.text}}</span>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <ng-container *ngFor=\"let child of item.children\">\r\n      <ng-container *ngTemplateOutlet=\"navItem;\r\n        context: {item:child, level: level+1}\">\r\n      </ng-container>\r\n    </ng-container>\r\n  </mat-expansion-panel>\r\n</ng-template>\r\n"
        },
        {
            "name": "NgBizViewTitle",
            "id": "component-NgBizViewTitle-ac04448c95ffad4f24cee0070c7ca1d02c7cc9f541b500092c6a0223f606462f4bc7e50bc4dfd4c96963c562b4e4667f30fbf25ab2f545056a7feb0419edcb38",
            "file": "projects/ngx-kit-business/components/src/view-title/view-title.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-view-title",
            "styleUrls": [
                "./view-title.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-title.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngbiz-view-title',\n  templateUrl: './view-title.html',\n  styleUrls: ['./view-title.scss']\n})\nexport class NgBizViewTitle {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: block;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  font-size: 13px;\r\n}\r\n",
                    "styleUrl": "./view-title.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "NgxKitBusinessComponent",
            "id": "component-NgxKitBusinessComponent-fbcaed7ca642a5b0624a481ca94d6be216745a986c42c1090a7831a82b988bff9f31c69c8a0be39ad720cf2bfe8f0e0f88e415be901bf66ae22a9cc280b4bf6b",
            "file": "projects/ngx-kit-business/src/lib/ngx-kit-business.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-ngx-kit-business",
            "styleUrls": [],
            "styles": [],
            "template": "<p>\n  ngx-kit-business works!\n</p>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'lib-ngx-kit-business',\n  template: `\n    <p>\n      ngx-kit-business works!\n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class NgxKitBusinessComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-badb6d8cee577661da79ba82ad8f599604afd40fa34e36c7b88d71d77a4fbc7184228cba2f0d73e255d0b7bc51c4c7a8e7b0128b3624aeb0255abab9030fa59a",
            "file": "projects/ngx-kit-business/src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport type { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\n.storybook-page h2 {\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\n.storybook-page ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.storybook-page .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ProcessButtonComponent",
            "id": "component-ProcessButtonComponent-61c0967061a2326dec921782056c22d40e961495b0307c899f529ccb18d1850f86f7690d6e16947b07a1bc6ecaefeae6ebae965fbfd6e584b058834b91571305",
            "file": "projects/ngx-kit-business/components/src/process-button/process-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-process-button",
            "styleUrls": [
                "./process-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./process-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activeProcess",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "activeProcessText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "submit",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onButtonClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngbiz-process-button',\r\n  templateUrl: './process-button.component.html',\r\n  styleUrls: ['./process-button.component.scss'],\r\n})\r\nexport class ProcessButtonComponent {\r\n  @Input() text!: string;\r\n  @Input() submit: boolean = true;\r\n  @Input() icon!: string;\r\n  @Input() rounded: boolean = false;\r\n  @Input() activeProcess: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n  @Input() activeProcessText!: string;\r\n  @Input() color: string = 'primary';\r\n  @Output() onButtonClick = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: inline-block;\r\n}\r\n.spinner-grow {\r\n  margin-right: 8px;\r\n  margin-top: -2px;\r\n}\r\nmat-icon {\r\n  margin-right: 4px;\r\n}\r\n.rounded {\r\n  border-radius: 18px !important;\r\n}\r\n",
                    "styleUrl": "./process-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button [type]=\"submit?'submit':'button'\" [disabled]=\"disabled || activeProcess\" mat-raised-button [color]=\"color\"\r\n  [class.rounded]=\"rounded\" (click)=\"onButtonClick.emit()\">\r\n  <span *ngIf=\"activeProcess\" class=\"spinner-grow spinner-grow-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n  <mat-icon *ngIf=\"icon&&!activeProcess\" [svgIcon]=\"icon\"></mat-icon>{{activeProcess ? activeProcessText: text}}\r\n</button>\r\n"
        },
        {
            "name": "ProcessMaskComponent",
            "id": "component-ProcessMaskComponent-9a05540618b246a0a962c12819fed82725ef184ddd74f9292730a1232acc91a5910bc31106ab0e9556106a784e51fd0886aa3a9811a32f66d1eaf52fbf50c333",
            "file": "projects/ngx-kit-business/components/src/process-mask/process-mask.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./process-mask.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./process-mask.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Input } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  templateUrl: './process-mask.component.html',\r\n  styleUrls: ['./process-mask.component.scss'],\r\n})\r\nexport class ProcessMaskComponent {\r\n  @Input() message: string = '';\r\n  constructor(\r\n    protected dialogRef: MatDialogRef<ProcessMaskComponent>,\r\n    @Inject(MAT_DIALOG_DATA) private inputData: any\r\n  ) {\r\n    const me = this;\r\n    if (me.inputData) {\r\n      me.message = me.inputData.message;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  justify-items: center;\r\n  flex-direction: column;\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./process-mask.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProcessMaskComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "inputData",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProcessMaskComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "inputData",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-spinner diameter=\"48\"></mat-spinner>\r\n<div class=\"message\">{{message}}</div>\r\n"
        },
        {
            "name": "ProgressViewComponent",
            "id": "component-ProgressViewComponent-35adbaef2eb7e4a368d63b5dcc2ea71f8290f1628315137379d2a9cee34046df62c25245eef3fa08929b3d597634061bce1e2c18c3dc9b6b3078de461088b023",
            "file": "projects/ngx-kit-business/components/src/progress-view/progress-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-progress-view",
            "styleUrls": [
                "./progress-view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "text",
                    "defaultValue": "'Cargando...'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "zIndex",
                    "defaultValue": "1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'ngbiz-progress-view',\r\n  templateUrl: './progress-view.component.html',\r\n  styleUrls: ['./progress-view.component.scss'],\r\n})\r\nexport class ProgressViewComponent {\r\n  @Input() text: string = 'Cargando...';\r\n  @HostBinding('style.z-index')\r\n  @Input() zIndex: number = 1000;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  background-color: #fafafa;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  > div {\r\n    margin: auto;\r\n  }\r\n}\r\nspan {\r\n  letter-spacing: 6px;\r\n  font-size: 14px;\r\n  display: block;\r\n  color: #616161;\r\n  margin-bottom: 6px;\r\n}\r\n/* TODO(mdc-migration): The following rule targets internal classes of progress-bar that may no longer apply for the MDC version. */\r\nmat-progress-bar {\r\n  height: 6px;\r\n  border-radius: 4px;\r\n}\r\n",
                    "styleUrl": "./progress-view.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>\r\n  <span>{{text}}</span>\r\n  <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n</div>\r\n"
        },
        {
            "name": "SnackBarComponent",
            "id": "component-SnackBarComponent-1b0df8ddf6380d737b387bd2cccb79a5532902f9789b1fba6f5a802d9ad427dde37bcdb5747dc02a6d8c672105cf25c37d9ffaf9277a21fff6387e92d4d87d0a",
            "file": "projects/ngx-kit-business/components/src/snack-bar/snack-bar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./snack-bar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./snack-bar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_SNACK_BAR_DATA"
                        }
                    ],
                    "modifierKind": [
                        167,
                        123
                    ]
                },
                {
                    "name": "snackBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSnackBar",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA, MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  templateUrl: './snack-bar.component.html',\r\n  styleUrls: ['./snack-bar.component.scss'],\r\n})\r\nexport class SnackBarComponent {\r\n  constructor(\r\n    @Inject(MAT_SNACK_BAR_DATA) public data: any,\r\n    public snackBar: MatSnackBar\r\n  ) { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./snack-bar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [innerHTML]=\"data.html\"></div>\r\n<div *ngIf=\"data.action\" class=\"text-right\">\r\n  <button mat-button (click)=\"snackBar.dismiss()\">{{data.action}}</button>\r\n</div>\r\n"
        },
        {
            "name": "TextFilterComponent",
            "id": "component-TextFilterComponent-fc3667e6bdcd53ba551a571ffae19a5d1f220cdad24d3c70f0a0d3cfc3bfd46fb163f1e52f2f00e3d00631b287f6fec3c7a3fdabf45b28a13a9e9d13015e46b9",
            "file": "projects/ngx-kit-business/components/src/text-filter/text-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-text-filter",
            "styleUrls": [
                "./text-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-filter.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "debounceTime",
                    "defaultValue": "500",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "\"Buscar\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "searchBox",
                    "defaultValue": "this.searchBoxObs.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchBoxObs",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "clearText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fireEvent",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSearchValueChange",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled when searchbox value changes.\n",
                    "description": "<p>Called when searchbox value changes.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 874,
                                "end": 875,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "e"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 868,
                                "end": 873,
                                "flags": 8421376,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'ngbiz-text-filter',\n  templateUrl: './text-filter.component.html',\n  styleUrls: ['./text-filter.component.scss']\n})\nexport class TextFilterComponent {\n  @Input() debounceTime: number = 500;\n  @Input() placeholder: string = \"Buscar\";\n  value: string = '';\n  // Se usa valueChange porque change produce un error.\n  @Output() valueChange: EventEmitter<string> = new EventEmitter();\n  private searchBoxObs = new Subject<string>();\n  public searchBox = this.searchBoxObs.asObservable();\n\n  constructor() {\n    const me = this;\n    me.searchBox.pipe(debounceTime(me.debounceTime)).subscribe((word) => {\n      me.fireEvent(word);\n    });\n  }\n\n  /**\n   * Called when searchbox value changes.\n   * @param e\n   */\n  onSearchValueChange(e: any) {\n    let value = (e.value || '').trim();\n    if (this.debounceTime > 0) {\n      this.searchBoxObs.next(value);\n      return;\n    }\n    this.fireEvent(value);\n  }\n  fireEvent(value: string) {\n    this.valueChange.emit(value);\n  }\n  clearText() {\n    this.value = '';\n    this.fireEvent('');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../scss/vars\";\r\n.wrapper {\r\n  display: flex;\r\n  width: 100%;\r\n  position: relative;\r\n}\r\ninput {\r\n  flex: 1;\r\n  padding: 0 31px;\r\n  min-height: 26px;\r\n  width: 100%;\r\n  height: 26px;\r\n  border: 1px solid #bdbdbd;\r\n  border-radius: $ngbiz-filter-input-border-radius;\r\n  outline-color: $ngbiz-accent-color;\r\n  &:focus-visible {\r\n    outline-color: var(--ngbiz-primary-color, $ngbiz-primary-color);\r\n    outline-style: solid;\r\n    outline-width: 1px;\r\n    border-color: var(--ngbiz-primary-color, $ngbiz-primary-color);\r\n  }\r\n}\r\n.search-icon,\r\n.clear-button {\r\n  font-size: 20px;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n.search-icon {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 7px;\r\n  transform: translateY(-50%);\r\n}\r\n.clear-button {\r\n  position: absolute;\r\n  top: 50%;\r\n  right: 7px;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  &:hover {\r\n    color: var(--ngbiz-primary-color, $ngbiz-primary-color);\r\n  }\r\n}\r\n",
                    "styleUrl": "./text-filter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "templateData": "<div class=\"wrapper\">\n  <mat-icon class=\"search-icon\">search</mat-icon>\n  <input type=\"text\" (input)=\"onSearchValueChange($event.target)\" [placeholder]=\"placeholder\"\n    type=\"text\" [(ngModel)]=\"value\" />\n  <mat-icon *ngIf=\"value\" class=\"clear-button\" (click)=\"clearText()\">clear</mat-icon>\n</div>\n"
        },
        {
            "name": "ViewBreadcrumbComponent",
            "id": "component-ViewBreadcrumbComponent-8d0e23f8a288d69f8278d1844f090ccc988bd5d3e63d5c5b02595470777471f56d80994146d7b943719d6a4290944df5c7169993054a3bac4f43e33a90ecbbd6",
            "file": "projects/ngx-kit-business/components/src/view-breadcrumb/view-breadcrumb.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-view-breadcrumb",
            "styleUrls": [
                "./view-breadcrumb.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-breadcrumb.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngbiz-view-breadcrumb',\n  templateUrl: './view-breadcrumb.component.html',\n  styleUrls: ['./view-breadcrumb.component.scss']\n})\nexport class ViewBreadcrumbComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex;\r\n  align-items: center;\r\n  height: 28px;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  background-color: #e0e0e0;\r\n  font-weight: 500;\r\n  text-transform: uppercase;\r\n  font-size: 13px;\r\n}\r\n",
                    "styleUrl": "./view-breadcrumb.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-content></ng-content>\n"
        },
        {
            "name": "ViewBreadcrumbSeparatorComponent",
            "id": "component-ViewBreadcrumbSeparatorComponent-80df686c94c2b4896ac3361137a085a5025696ce44ccfc090dd28f121f0e4432797102e27880cd48dcba96a4667549f96c7a4bf3c6b84de87f189f57efc36afd",
            "file": "projects/ngx-kit-business/components/src/view-breadcrumb/view-breadcrumb-separator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-view-breadcrumb-separator",
            "styleUrls": [],
            "styles": [
                "\n    :host {\n      margin: 0 8px;\n      line-height: 1;\n      padding-top: 1px;\n    }\n  "
            ],
            "template": "&#10095;",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'ngbiz-view-breadcrumb-separator',\n  template: `&#10095;`,\n  styles: [`\n    :host {\n      margin: 0 8px;\n      line-height: 1;\n      padding-top: 1px;\n    }\n  `]\n})\nexport class ViewBreadcrumbSeparatorComponent {\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    :host {\n      margin: 0 8px;\n      line-height: 1;\n      padding-top: 1px;\n    }\n  \n"
        },
        {
            "name": "ViewContentWrapperComponent",
            "id": "component-ViewContentWrapperComponent-aac61e401862138d75bf2010382531561f7db4f8ba48f4fc14b5315ee785367f66a98f36b726ddbc04f6ac909d5d8bde758a3273ca8371f8e1dbc9e07cf67f52",
            "file": "projects/ngx-kit-business/components/src/view-content-wrapper/view-content-wrapper.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ngbiz-view-content-wrapper",
            "styleUrls": [
                "./view-content-wrapper.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view-content-wrapper.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "view",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'ngbiz-view-content-wrapper',\n  templateUrl: './view-content-wrapper.component.html',\n  styleUrls: ['./view-content-wrapper.component.scss'],\n})\nexport class ViewContentWrapperComponent {\n\n  @Input() view: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  display: flex !important;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  .fill-space {\r\n    flex: 1 1 auto !important;\r\n    overflow: auto !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./view-content-wrapper.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ngbiz-progress-view *ngIf=\"view.shouldShowProgressView()\"></ngbiz-progress-view>\n<ngbiz-data-error-view *ngIf=\"view.shouldShowErrorView()\" [status]=\"view.getErrorStatus()\"\n  (actionClick)=\"view.loadData()\"></ngbiz-data-error-view>\n<ng-content></ng-content>\n"
        }
    ],
    "modules": [
        {
            "name": "NgBizAppHeaderModule",
            "id": "module-NgBizAppHeaderModule-a3412a48a5ab1bb3eb156abd2360aa951b0721bb3cee67c0556807ed5d09b0a3c1378f8eb5a7fcc3e4aeca60a31479d11ea1f5c1f9619741c7acbfae2e1fa61b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/app-header/app-header.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\n\r\nimport { AppHeaderComponent } from \"./app-header.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppHeaderComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [\r\n    AppHeaderComponent,\r\n  ],\r\n})\r\nexport class NgBizAppHeaderModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizBreadcrumbModule",
            "id": "module-NgBizBreadcrumbModule-ccf4f5550506e82b77d5815536a4f9164d16fe211d488c475a9f03cda5ace3a543e1c613fc0f3a10077383e22420ddbcc78409a4a82a6719245e1d892b65a576",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/view-breadcrumb/view-breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { ViewBreadcrumbComponent } from \"./view-breadcrumb.component\";\r\nimport { ViewBreadcrumbSeparatorComponent } from \"./view-breadcrumb-separator.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ViewBreadcrumbComponent,\r\n    ViewBreadcrumbSeparatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    ViewBreadcrumbComponent,\r\n    ViewBreadcrumbSeparatorComponent,\r\n  ],\r\n})\r\nexport class NgBizBreadcrumbModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ViewBreadcrumbComponent"
                        },
                        {
                            "name": "ViewBreadcrumbSeparatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ViewBreadcrumbComponent"
                        },
                        {
                            "name": "ViewBreadcrumbSeparatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizDataErrorViewModule",
            "id": "module-NgBizDataErrorViewModule-8b3a1c15fd06eadeca0ad23aa85c377784b5afda4b028720a1d7a44c7866d34221bca130b6a821b85d8cda05716c847e859a0900f652b9a0270a167502a03f53",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/data-error-view/data-error-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\n\r\nimport { DataErrorViewComponent } from \"./data-error-view.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DataErrorViewComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n  ],\r\n  exports: [\r\n    DataErrorViewComponent,\r\n  ],\r\n})\r\nexport class NgBizDataErrorViewModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataErrorViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DataErrorViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizDialogModule",
            "id": "module-NgBizDialogModule-3f7d18715ab2c08f51f06aed136baeedca04e4c2a4f5ecbb0cf070d780c3a9c59ca6a8c4952ac5dbc5af981dda7cdacf7dcee41b410b654aea791b86e66c78ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\n\r\nimport { DialogComponent } from \"./dialog.component\";\r\n@NgModule({\r\n  declarations: [\r\n    DialogComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatDialogModule,\r\n  ],\r\n  exports: [\r\n    DialogComponent,\r\n  ],\r\n})\r\nexport class NgBizDialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizEditionPinModule",
            "id": "module-NgBizEditionPinModule-a3008399f364f2971d470f251ab095fa0e5217c164a389407d5359712eb992b9288c5c7d5c11caf8a30ea690c8156976618f4dc6fe86b99a6a1a3b379183deda",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/edition-pin/edition-pin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { EditionPinComponent } from \"./edition-pin.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    EditionPinComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatIconModule,\r\n  ],\r\n  exports: [\r\n    EditionPinComponent,\r\n  ],\r\n})\r\nexport class NgBizEditionPinModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "EditionPinComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "EditionPinComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizHttpActivityModule",
            "id": "module-NgBizHttpActivityModule-80daa37b99cd9c5b6bd38b16b141a467d35fcec9f8439e268f8573b9056665751c6aa5d430015d78f4e0586a886151d44b2bf4dce1df3d6eadc8a20aff7e4561",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\r\n\r\nimport { HttpActivityBarComponent } from \"./http-activity-bar.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    HttpActivityBarComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressBarModule,\r\n  ],\r\n  exports: [\r\n    HttpActivityBarComponent,\r\n  ],\r\n})\r\nexport class NgBizHttpActivityModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HttpActivityBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HttpActivityBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizListToolbarModule",
            "id": "module-NgBizListToolbarModule-20dce2649425325c7fbd253d75c21d583ebafba982438603225674e2a569c7b019ffc2786acead979caa5ba2aba211086f5f7b7b3ae1e3c7f60588154a8c5cb2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/list-toolbar/list-toolbar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\n\r\n\r\nimport { ListToolbarComponent } from \"./list-toolbar.component\";\r\nimport { NgBizTextFilterModule } from \"../text-filter\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ListToolbarComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    NgBizTextFilterModule,\r\n  ],\r\n  exports: [\r\n    ListToolbarComponent,\r\n  ],\r\n})\r\nexport class NgBizListToolbarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ListToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgBizTextFilterModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ListToolbarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizNavListModule",
            "id": "module-NgBizNavListModule-92207dea06a1cc0be653885388eaa87137075a00a87b3236fbd6b96049e2d0a4a8403b46c5749c389a55c92bc97c652cc5405e709dcd318eceae9f69b475e538",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/nav-list/nav-list.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\n\r\nimport { NavListComponent } from \"./nav-list.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NavListComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatButtonModule,\r\n    MatExpansionModule,\r\n    MatIconModule,\r\n    MatListModule,\r\n  ],\r\n  exports: [\r\n    NavListComponent,\r\n  ],\r\n})\r\nexport class NgBizNavListModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NavListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NavListComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizProcessButtonModule",
            "id": "module-NgBizProcessButtonModule-12a572623077c9bd88fc251777fa78169e6b84e43b5fd7d74e717c9debe63dd16df39d4bec7ec38d629f63f368c9b97c9aec3f0c16f0a6dabb43cccd5a471b68",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/process-button/process-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { ProcessButtonComponent } from \"./process-button.component\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProcessButtonComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n  ],\r\n  exports: [\r\n    ProcessButtonComponent,\r\n  ],\r\n})\r\nexport class NgBizProcessButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProcessButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProcessButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizProcessMaskModule",
            "id": "module-NgBizProcessMaskModule-d978f9ea988c67f865eef1f2365bc10ff9dbfd508f97cf8f6a08dfc4b0f8dffe1721f5b9bba90ab4d9cc30d6a71be877bb77992089e96f519a02ca2e466df8a8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/process-mask/process-mast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\n\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\nimport { ProcessMaskComponent } from \"./process-mask.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProcessMaskComponent,\r\n  ],\r\n  imports: [\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [\r\n    ProcessMaskComponent,\r\n  ],\r\n})\r\nexport class NgBizProcessMaskModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProcessMaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProcessMaskComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizProgressViewModule",
            "id": "module-NgBizProgressViewModule-1d435e181b86fc354a1070d6fa5c334a44ac6a0d05a8fe1c5fc8db871c170305a07b9935ce968d64f04a6797181cde1bf1401de774b73f6047697eddc9b0a6c2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/progress-view/progress-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\n\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\n\r\nimport { ProgressViewComponent } from \"./progress-view.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProgressViewComponent,\r\n  ],\r\n  imports: [\r\n    MatProgressBarModule,\r\n  ],\r\n  exports: [\r\n    ProgressViewComponent,\r\n  ],\r\n})\r\nexport class NgBizProgressViewModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProgressViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ProgressViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizSnackBarModule",
            "id": "module-NgBizSnackBarModule-6634fe68353e9802af666e8e068417c0d644bcb2045e97c0c4d2a9d4719ffd97f62421f6415e618d0465d3c2edae2a73361242fbfeab03e1fee6e7683adb5261",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/snack-bar/snack-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\n\r\nimport { SnackBarComponent } from \"./snack-bar.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    SnackBarComponent,\r\n  ],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  exports: [\r\n    SnackBarComponent,\r\n  ]\r\n})\r\nexport class NgBizSnackBarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SnackBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SnackBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizTextFilterModule",
            "id": "module-NgBizTextFilterModule-884d069b1c8ad0c7880ce22b0967ececa2921a95558fe212e3fe0cdcf0862d78a8b7e79d70ead2e2ac862d0d26a37e6099179afafd2e020c76d0668370b84a38",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/text-filter/text-filter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\nimport { TextFilterComponent } from \"./text-filter.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TextFilterComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n  ],\r\n  exports: [\r\n    TextFilterComponent,\r\n  ],\r\n})\r\nexport class NgBizTextFilterModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TextFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TextFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizViewContentWrapperModule",
            "id": "module-NgBizViewContentWrapperModule-37f86495cb5dd387b5ad2718d986dbae0f09eafe69299a27d4760728084f930d91d68de3e941b0ff23b313e3ff5feb4480dfc2fe5ca2615e3b94d5f2461aca2f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/view-content-wrapper/view-content-wrapper.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { NgBizDataErrorViewModule } from \"../data-error-view\";\r\nimport { NgBizProgressViewModule } from \"../progress-view\";\r\n\r\nimport { ViewContentWrapperComponent } from \"./view-content-wrapper.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ViewContentWrapperComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    NgBizDataErrorViewModule,\r\n    NgBizProgressViewModule,\r\n  ],\r\n  exports: [\r\n    ViewContentWrapperComponent,\r\n  ],\r\n})\r\nexport class NgBizViewContentWrapperModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ViewContentWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NgBizDataErrorViewModule"
                        },
                        {
                            "name": "NgBizProgressViewModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ViewContentWrapperComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgBizViewTitleModule",
            "id": "module-NgBizViewTitleModule-4781d3557558142c2aa79e0c0eea42b13c17ddb37207ff067f0d92624d2405bc5624fbf3cf92f026f51135347ac26a69dfb82d6c1e0902fab9f614cdc851e467",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/components/src/view-title/module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { NgBizViewTitle } from \"./view-title\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgBizViewTitle,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  exports: [\r\n    NgBizViewTitle,\r\n  ],\r\n})\r\nexport class NgBizViewTitleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgBizViewTitle"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgBizViewTitle"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NgxKitBusinessModule",
            "id": "module-NgxKitBusinessModule-cd56ae73ee43d10ac1070c2a063e2b7b2ca3f707587accab20eda079e3ad464afd03b148de07350dc2eabb16c13342bf08fa4aac31372d75d82b93e898bf6b8f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ngx-kit-business/src/lib/ngx-kit-business.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { NgxKitBusinessComponent } from './ngx-kit-business.component';\n\n\n\n@NgModule({\n  declarations: [\n    NgxKitBusinessComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    NgxKitBusinessComponent\n  ]\n})\nexport class NgxKitBusinessModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NgxKitBusinessComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NgxKitBusinessComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Add",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'add',\n  },\n}"
            },
            {
                "name": "Delete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'delete',\n  },\n}"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'edit',\n  },\n}"
            },
            {
                "name": "EMAIL_PATTERN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/"
            },
            {
                "name": "Example",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    items: [\n      { text: 'Item 2', icon: 'home', route: 'abc', children: [] },\n      { text: 'Item 1', icon: 'person', route: 'def', children: [] },\n    ],\n  },\n}"
            },
            {
                "name": "ExampleOne",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    appName: 'My Awesome App',\n  },\n}"
            },
            {
                "name": "HTTP_STATUS_MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/data-error-view/data-error-view.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  0: 'No se logr√≥ establecer conexi√≥n con el servidor',\n  400: 'El servidor no pudo procesar la petici√≥n',\n  401: 'Inicio de sesi√≥n requerido.',\n  403: 'Ud. No cuenta con los permisos necesarios para realizar acceder a est√° funcionalidad.',\n  404: 'Es servicio solicitado no existe.',\n  500: 'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.',\n  502: 'No se recibio respuesta de servicio externo.',\n  503: 'Este servicio se encuentra temporalmente deshabilitado.'\n}"
            },
            {
                "name": "HttpStatusMessages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/services/http-statuses.message.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "{\r\n  0: 'No se pudo conectar con el servidor',\r\n  400: 'El servidor no pudo procesar la petici√≥n',\r\n  401: 'Inicio de sesi√≥n requerido.',\r\n  403: 'Acceso prohibido.',\r\n  404: 'Es servicio solicitado no existe.',\r\n  500: 'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.',\r\n  502: 'No se recibio respuesta de servicio externo.',\r\n  503: 'Este servicio se encuentra temporalmente deshabilitado.'\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Button>",
                "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Header>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Page>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<AppHeaderComponent>",
                "defaultValue": "{\n  title: 'Application/Header',\n  tags: ['autodocs'],\n  component: AppHeaderComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [NgBizAppHeaderModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<EditionPinComponent>",
                "defaultValue": "{\n  title: 'Forms/EditionPin',\n  tags: ['autodocs'],\n  component: EditionPinComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [NgBizEditionPinModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<NavListComponent>",
                "defaultValue": "{\n  title: 'Application/NavList',\n  tags: ['autodocs'],\n  component: NavListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [NgBizNavListModule, CommonModule, RouterTestingModule],\n    }),\n  ],\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
            },
            {
                "name": "URL_PATTERN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "/(((^https?)|(^ftp)):\\/\\/((([\\-\\w]+\\.)+\\w{2,3}(\\/[%\\-\\w]+(\\.\\w{2,})?)*(([\\w\\-\\.\\?\\\\\\/+@&#;`~=%!]*)(\\.\\w{2,})?)*)|(localhost|LOCALHOST))\\/?)/i"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "buttonsType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"yes_not\" | \"confirm_cancel\" | \"cancel_confirm\" | \"ok\"",
                "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "MessageType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"success\" | \"warning\" | \"danger\"",
                "file": "projects/ngx-kit-business/components/src/services/message.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 189
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Button>",
                "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Header>",
                "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<Page>",
                "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<AppHeaderComponent>",
                "file": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<EditionPinComponent>",
                "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<NavListComponent>",
                "file": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "RAISED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "raised"
                    },
                    {
                        "name": "STROKED",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "stroked"
                    },
                    {
                        "name": "NORMAL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "normal"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts"
            },
            {
                "name": "COMPONENT_TYPE",
                "childs": [
                    {
                        "name": "PAGE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "page"
                    },
                    {
                        "name": "COMPONENT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "component"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "projects/ngx-kit-business/components/src/table-view.component.ts"
            }
        ],
        "groupedVariables": {
            "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts": [
                {
                    "name": "Add",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'add',\n  },\n}"
                },
                {
                    "name": "Delete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'delete',\n  },\n}"
                },
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'edit',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<EditionPinComponent>",
                    "defaultValue": "{\n  title: 'Forms/EditionPin',\n  tags: ['autodocs'],\n  component: EditionPinComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [NgBizEditionPinModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ngx-kit-business/components/src/form-builder-helper.ts": [
                {
                    "name": "EMAIL_PATTERN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/^([a-zA-Z0-9_\\.\\-])+\\@(([a-zA-Z0-9\\-])+\\.)+([a-zA-Z0-9]{2,4})+$/"
                },
                {
                    "name": "URL_PATTERN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "/(((^https?)|(^ftp)):\\/\\/((([\\-\\w]+\\.)+\\w{2,3}(\\/[%\\-\\w]+(\\.\\w{2,})?)*(([\\w\\-\\.\\?\\\\\\/+@&#;`~=%!]*)(\\.\\w{2,})?)*)|(localhost|LOCALHOST))\\/?)/i"
                }
            ],
            "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts": [
                {
                    "name": "Example",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    items: [\n      { text: 'Item 2', icon: 'home', route: 'abc', children: [] },\n      { text: 'Item 1', icon: 'person', route: 'def', children: [] },\n    ],\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<NavListComponent>",
                    "defaultValue": "{\n  title: 'Application/NavList',\n  tags: ['autodocs'],\n  component: NavListComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [NgBizNavListModule, CommonModule, RouterTestingModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts": [
                {
                    "name": "ExampleOne",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    appName: 'My Awesome App',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<AppHeaderComponent>",
                    "defaultValue": "{\n  title: 'Application/Header',\n  tags: ['autodocs'],\n  component: AppHeaderComponent,\n  decorators: [\n    moduleMetadata({\n      imports: [NgBizAppHeaderModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ngx-kit-business/components/src/data-error-view/data-error-view.component.ts": [
                {
                    "name": "HTTP_STATUS_MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/data-error-view/data-error-view.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  0: 'No se logr√≥ establecer conexi√≥n con el servidor',\n  400: 'El servidor no pudo procesar la petici√≥n',\n  401: 'Inicio de sesi√≥n requerido.',\n  403: 'Ud. No cuenta con los permisos necesarios para realizar acceder a est√° funcionalidad.',\n  404: 'Es servicio solicitado no existe.',\n  500: 'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.',\n  502: 'No se recibio respuesta de servicio externo.',\n  503: 'Este servicio se encuentra temporalmente deshabilitado.'\n}"
                }
            ],
            "projects/ngx-kit-business/components/src/services/http-statuses.message.ts": [
                {
                    "name": "HttpStatusMessages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/components/src/services/http-statuses.message.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "{\r\n  0: 'No se pudo conectar con el servidor',\r\n  400: 'El servidor no pudo procesar la petici√≥n',\r\n  401: 'Inicio de sesi√≥n requerido.',\r\n  403: 'Acceso prohibido.',\r\n  404: 'Es servicio solicitado no existe.',\r\n  500: 'Ha ocurrido un error en nuestro servidor, por favor intente m√°s tarde.',\r\n  502: 'No se recibio respuesta de servicio externo.',\r\n  503: 'Este servicio se encuentra temporalmente deshabilitado.'\r\n}"
                }
            ],
            "projects/ngx-kit-business/src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'large',\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Button>",
                    "defaultValue": "{\n  title: 'Example/Button',\n  component: Button,\n  tags: ['autodocs'],\n  render: (args: Button) => ({\n    props: {\n      backgroundColor: null,\n      ...args,\n    },\n  }),\n  argTypes: {\n    backgroundColor: {\n      control: 'color',\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    primary: true,\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Button',\n  },\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    size: 'small',\n    label: 'Button',\n  },\n}"
                }
            ],
            "projects/ngx-kit-business/src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Header>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: Header,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\n  tags: ['autodocs'],\n  render: (args) => ({ props: args }),\n  decorators: [\n    moduleMetadata({\n      declarations: [Button],\n      imports: [CommonModule],\n    }),\n  ],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/ngx-kit-business/src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = await canvas.getByRole('button', {\n      name: /Log in/i,\n    });\n    await userEvent.click(loginButton);\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  render: (args: Page) => ({\n    props: args,\n  }),\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Page>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: Page,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\n    layout: 'fullscreen',\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [Button, Header],\n      imports: [CommonModule],\n    }),\n  ],\n}"
                }
            ],
            "projects/ngx-kit-business/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ngx-kit-business/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "projects/ngx-kit-business/components/src/dialog/dialog.component.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "RAISED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "raised"
                        },
                        {
                            "name": "STROKED",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "stroked"
                        },
                        {
                            "name": "NORMAL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "normal"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts"
                }
            ],
            "projects/ngx-kit-business/components/src/table-view.component.ts": [
                {
                    "name": "COMPONENT_TYPE",
                    "childs": [
                        {
                            "name": "PAGE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "page"
                        },
                        {
                            "name": "COMPONENT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "component"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "projects/ngx-kit-business/components/src/table-view.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "projects/ngx-kit-business/components/src/dialog/dialog.component.ts": [
                {
                    "name": "buttonsType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"yes_not\" | \"confirm_cancel\" | \"cancel_confirm\" | \"ok\"",
                    "file": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-kit-business/components/src/services/message.type.ts": [
                {
                    "name": "MessageType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"success\" | \"warning\" | \"danger\"",
                    "file": "projects/ngx-kit-business/components/src/services/message.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 189
                }
            ],
            "projects/ngx-kit-business/src/stories/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Button>",
                    "file": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-kit-business/src/stories/Header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Header>",
                    "file": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-kit-business/src/stories/Page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<Page>",
                    "file": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<AppHeaderComponent>",
                    "file": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<EditionPinComponent>",
                    "file": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<NavListComponent>",
                    "file": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 4,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ngx-kit-business/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ExampleOne",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/app-header/AppHeader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/app-header/app-header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/data-error-view/data-error-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataErrorViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/data-error-view/data-error-view.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HTTP_STATUS_MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogDataOptions",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/dialog/dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DialogOption",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Add",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/edition-pin/EditionPin.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/edition-pin/edition-pin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditionPinComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/filters-container.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FiltersContainerComponent",
                "coveragePercent": 8,
                "coverageCount": "1/12",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormBuilderHelper",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormField",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormFieldOptions",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMAIL_PATTERN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/form-builder-helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "URL_PATTERN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/form-dialog.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FormDialogComponent",
                "coveragePercent": 21,
                "coverageCount": "15/69",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HttpActivityBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpActivityInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/http-activity-bar/http-activity.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HttpActivityService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/list-toolbar/list-toolbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListToolbarComponent",
                "coveragePercent": 7,
                "coverageCount": "1/13",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/nav-list/NavList.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/nav-list/nav-item.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavItemModel",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/nav-list/nav-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/process-button/process-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProcessButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/process-mask/process-mask.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProcessMaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/progress-view/progress-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/services/dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DialogService",
                "coveragePercent": 50,
                "coverageCount": "5/10",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/services/http-statuses.message.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HttpStatusMessages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/services/notifications.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationsService",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/services/xhr-info.ts",
                "type": "class",
                "linktype": "classe",
                "name": "XhrInfo",
                "coveragePercent": 60,
                "coverageCount": "3/5",
                "status": "good"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/snack-bar/snack-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SnackBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/store-service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StoreService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/table-view.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TableViewComponent",
                "coveragePercent": 10,
                "coverageCount": "13/121",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/text-filter/text-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextFilterComponent",
                "coveragePercent": 9,
                "coverageCount": "1/11",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/utils/string-utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StringUtils",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/view-breadcrumb/view-breadcrumb-separator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewBreadcrumbSeparatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/view-breadcrumb/view-breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewBreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/view-content-wrapper/view-content-wrapper.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewContentWrapperComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/components/src/view-title/view-title.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgBizViewTitle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/lib/ngx-kit-business.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NgxKitBusinessComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/lib/ngx-kit-business.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NgxKitBusinessService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ngx-kit-business/src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}